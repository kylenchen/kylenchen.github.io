<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Tech &amp; Life</title>
  
  <subtitle>Tech &amp; Life</subtitle>
  <link href="https://booku.ltd/atom.xml" rel="self"/>
  
  <link href="https://booku.ltd/"/>
  <updated>2021-05-09T15:56:24.155Z</updated>
  <id>https://booku.ltd/</id>
  
  <author>
    <name>Kylen Chan</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Typecho开启Gzip压缩加速网站</title>
    <link href="https://booku.ltd/posts/gzip/"/>
    <id>https://booku.ltd/posts/gzip/</id>
    <published>2021-05-09T14:00:48.000Z</published>
    <updated>2021-05-09T15:56:24.155Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Gzip简介"><a href="#Gzip简介" class="headerlink" title="Gzip简介"></a>Gzip简介</h2><p>GZip压缩，是一种网站速度优化技术，也是一把SEO优化利器，许多网站都采用了这种技术，以达到提升网页打开速度、缩短网页打开时间的目的。</p><p>网站采用Gzip压缩，还有一个好处，就是让你少了一份流量超标的担心。因为Gzip开启以后会将输出到用户浏览器的数据进行压缩的处理，这样就会减小通过网络传输的数据量，而这个，也正是提升网页打开时间的原因所在。</p><h2 id="开启方法"><a href="#开启方法" class="headerlink" title="开启方法"></a>开启方法</h2><p>打开typecho目录下的 <code>index.php</code>，并在开头添加 <code>ob_start(&#39;ob_gzhandler&#39;)</code>; 即可。</p><p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/Thbook/webpic@latest/blogpic/2021/05/09/1620572725.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="软件" scheme="https://booku.ltd/categories/%E8%BD%AF%E4%BB%B6/"/>
    
    
    <category term="博客" scheme="https://booku.ltd/tags/%E5%8D%9A%E5%AE%A2/"/>
    
    <category term="Typecho" scheme="https://booku.ltd/tags/Typecho/"/>
    
  </entry>
  
  <entry>
    <title>Linux 提升VPS安全性</title>
    <link href="https://booku.ltd/posts/ssh-port/"/>
    <id>https://booku.ltd/posts/ssh-port/</id>
    <published>2020-12-08T08:18:03.000Z</published>
    <updated>2021-05-09T15:56:24.155Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>刚刚接触VPS的时候，对于VPS的安全性并没有什么概念，使用PuTTY客户端，以root账户在22端口登录的，刚开始登录几次都没出现什么状况，然而隔数分钟登录的时候就出现了类似以下的提示，这才让我产生了要提高VPS安全性的想法。</p><blockquote><p>Last failed login: Sat DEC 6 22:45:12 EST 2020 from static-15-64-34.rpnspl.com on ssh:notty<br>There were 24 failed login attempts since the last successful login.<br>Last login: Sat DEC 6 23:16:26 2020 from ip</p></blockquote><p>这里的ip并不是我的IP地址，也就是说有人(或机器人)在恶意试探我的VPS密码。看到这提示，搜索发现这个现象非常普遍，多数都是被机器人扫描然后试图暴力破解，如果不加以防范，代价会很大。</p><p>那么如何知道自己的VPS账号正在遭受扫描和暴力破解呢？简单的方法就是查看日志：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看登录成功的用户信息</span></span><br><span class="line">last</span><br><span class="line"><span class="comment"># 最新的登录记录在最前面，所以可以用以下命令来查看。</span></span><br><span class="line">last | less</span><br><span class="line"><span class="comment"># 查看登录失败的用户信息</span></span><br><span class="line">lastb</span><br><span class="line"><span class="comment"># 查看登录日志</span></span><br><span class="line">tail /var/<span class="built_in">log</span>/secure</span><br></pre></td></tr></table></figure><p>也可以执行以下命令，查询出来的结果中包含了<code>ip地址=数量</code>就是攻击者信息。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /var/<span class="built_in">log</span>/secure|awk <span class="string">&#x27;/Failed/&#123;print $(NF-3)&#125;&#x27;</span>|sort|uniq -c|awk <span class="string">&#x27;&#123;print $2&quot;=&quot;$1;&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>如何来增强VPS账号的安全性呢？除了养成使用正规软件的好习惯外，还要从VPS本身来加强VPS账号的安全性。</p><ul><li>Linux有一个自动统计VPS登录错误的工具：Denyhosts，一旦登录VPS账号错误次数超过了Denyhosts的安全设置，Denyhosts就会将该IP记录下来，同时将其放入黑名单当中，禁止该IP在某一段时间内继续访问VPS，通过它可以实现自动封锁恶意IP</li><li>默认的SSH端口是22，通过修改自己的SSH端口先为扫描者增加一道端口门槛</li><li>VPS默认的账号是root，如果我们禁用了root，那么要攻破账号又得先暴力猜测VPS的账号，难度又增加几分</li><li>如果还不放心，我们可以直接禁用密码登录验证VPS的方式，改用密钥登录，这样安全系数是相当高了</li></ul><h2 id="Denyhosts攻击"><a href="#Denyhosts攻击" class="headerlink" title="Denyhosts攻击"></a>Denyhosts攻击</h2><ol><li><p>Linux各平台现在基本上都可以直接安装Denyhosts了，直接运行命令安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install denyhosts</span><br></pre></td></tr></table></figure></li><li><p>安装好了Denyhosts，默认的配置基本上就可以防御一定的暴力攻击了，<code>/etc/hosts.deny</code>文件里保存了被屏蔽的记录。</p></li><li><p>如果你要自定义Denyhosts的相关配置，执行：<code>vi /etc/denyhosts.conf</code>，相关参数的说明可以自行搜索，一般用户默认即可</p></li></ol><h2 id="修改SSH端口"><a href="#修改SSH端口" class="headerlink" title="修改SSH端口"></a>修改SSH端口</h2><p>第一步、使用xshell或者putty登录VPS，找到其中的<code>#Port 22</code>(约第13行),去掉#，把<code>port 22</code>修改为任意的5个数字，如：<code>port 16753</code></p><div class="note warning">            <p>为避免修改删除默认端口22后无法链接SSH，应先在默认的SSH端口配置下面添加一个我们要用的新的端口。<br>Port 22<br>Port 16753</p>          </div><p>输入命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure><p>第二步、重启SSH。保存退出后，需要重启SSH才可以生效。</p><p>centos系统重启SSH命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service sshd restart</span><br></pre></td></tr></table></figure><p>debian或者ubuntu系统SSH重启命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service ssh restart</span><br></pre></td></tr></table></figure><p>第三步、设定防火墙开启端口</p><p>输入命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/sbin/iptables -I INPUT -p tcp --dport 16753（这里的数字改成你刚才修改的端口） -j ACCEPT</span><br><span class="line"></span><br><span class="line">/etc/init.d/iptables save</span><br></pre></td></tr></table></figure><p>用<code>iptables -L -n</code>检查端口是否开启。</p><h2 id="禁用Root账户"><a href="#禁用Root账户" class="headerlink" title="禁用Root账户"></a>禁用Root账户</h2><p>禁用root账户之前，必须先新建一个新的账户。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">useradd user <span class="comment">#添加用户名</span></span><br><span class="line">passwd user <span class="comment">#为user用户设置密码</span></span><br></pre></td></tr></table></figure><p>然后编辑配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi &#x2F;etc&#x2F;ssh&#x2F;sshd_config</span><br></pre></td></tr></table></figure><p>找到里面的<code>PermitRootLogin yes</code>，将后面的<code>yes</code>改成<code>no</code>，如果没有这一行则直接加入即可。保存后重启SSH服务以使配置生效。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart sshd.service</span><br></pre></td></tr></table></figure><h2 id="使用密钥登录"><a href="#使用密钥登录" class="headerlink" title="使用密钥登录"></a>使用密钥登录</h2><h3 id="生成密钥"><a href="#生成密钥" class="headerlink" title="生成密钥"></a>生成密钥</h3><p>SSH登录方式有账号+密码和密钥认证两种形式，为了阻止暴力破解VPS的账号和密码，我们可以放弃密码验证的方式，改用密钥文件验证。</p><p>以普通用户(如user)执行以下命令，在VPS上生成密钥文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure><p>生成密钥时会询问你密钥保存的位置，默认是<code>/username/.ssh</code>，保持默认即可，你还可以为你的密钥设置一个密码，默认为空。密钥生成后，进入密钥存放的目录中，执行以下命令，将公钥生成一个新的文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat id_rsa.pub &gt;&gt; authorized_keys</span><br></pre></td></tr></table></figure><p>将id-rsa这个私钥文件用winSCP下载到本地，打开PuTTYGen软件，执行<code>Conversions-&gt;Import Key</code>，导入这个私钥文件，然后选择<code>Save private key</code>，这时会在本地生成一个PPK文件，在PuTTY的<code>Connection/SSH/Auth</code>中选择刚刚保存的PPK文件，以后即可用密钥认证登录VPS了。</p><h3 id="CentOS-7权限问题"><a href="#CentOS-7权限问题" class="headerlink" title="CentOS 7权限问题"></a>CentOS 7权限问题</h3><p>CentOS 7系统下，用户user的home目录：<code>/home/user</code>的权限变成了<code>777</code>，造成不能正常登陆SSH，报如下错误：<code>Permission denied (publickey,gssapi-keyex,gssapi-with-mic,password)</code></p><p>SSH对公钥、私钥的权限和所有权的要求是非常严格的，总结如下：<br>1、下面两个目录的所有权必须是<code>user</code>，所属组也应该是<code>user</code>，权限必须为<code>700</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/home/user</span><br><span class="line">/home/user/.ssh</span><br></pre></td></tr></table></figure><p>2、下面公钥文件的所有权必须是<code>user</code>，所属组也应该是<code>user</code>，权限必须为<code>644</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/home/user/.ssh/authorized_keys</span><br></pre></td></tr></table></figure><p>3、下面私钥文件的所有权必须是<code>user</code>，所属组也应该是<code>user</code>，权限必须是<code>600</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/home/user/.ssh/id_rsa</span><br></pre></td></tr></table></figure><p>接着上面的操作，这次需要获取root权限，首先输入命令su再输入root密码获取root权限，然后依次执行以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkdir /etc/ssh/user</span><br><span class="line">cp /home/user/.ssh/authorized_keys /etc/ssh/user/</span><br><span class="line">chmod 755 /etc/ssh/user</span><br><span class="line">chmod 600 /etc/ssh/user/authorized_keys</span><br><span class="line">chown -R user:user /etc/ssh/user</span><br></pre></td></tr></table></figure><p>编辑SSH配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure><p>找到<code>AuthorizedKeysFile</code>这项(如果没有则添加)，修改为</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AuthorizedKeysFile /etc/ssh/%u/authorized_keys</span><br></pre></td></tr></table></figure><p>保存后重启SSH服务以使配置生效</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart sshd.service</span><br></pre></td></tr></table></figure><h3 id="禁止密码登录"><a href="#禁止密码登录" class="headerlink" title="禁止密码登录"></a>禁止密码登录</h3><p>注意：请确认你已经可以通过密钥认证的方式登录VPS</p><p>有了密钥登录VPS，我们就可以禁止用密码登录这种验证方式了，还是编辑SSH配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure><p>找到<code>PasswordAuthentication</code>(没有则添加)并修改后面的<code>yes</code>为<code>no</code>，保存后重启SSH服务以使配置生效</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart sshd.service</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过以上这些措施可以有效防范暴力破解VPS，平时使用官方软件也是提升安全性的一大举措，总而言之，没有绝对的安全，但是只要我们平时稍加留心就不会给破解者可乘之机。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://i-square.github.io/post/%E5%A2%9E%E5%BC%BAVPS%E5%AE%89%E5%85%A8%E6%80%A7%E7%9A%84%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/">增强VPS安全性的常用方法</a></li><li><a href="https://doubibackup.com/xq4-65xu.html">Linux 修改默认SSH端口 22，避免被暴力破解密码</a></li><li><a href="http://www.vpscuxiao.com/post/1.html">Linux VPS安全教程 – 修改VPS默认SSH端口22</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="VPS" scheme="https://booku.ltd/categories/VPS/"/>
    
    
    <category term="Linux" scheme="https://booku.ltd/tags/Linux/"/>
    
    <category term="教程" scheme="https://booku.ltd/tags/%E6%95%99%E7%A8%8B/"/>
    
    <category term="SSH" scheme="https://booku.ltd/tags/SSH/"/>
    
  </entry>
  
  <entry>
    <title>AWS lightsail实现用SSH root用户登录</title>
    <link href="https://booku.ltd/posts/lightsail-ssh/"/>
    <id>https://booku.ltd/posts/lightsail-ssh/</id>
    <published>2020-12-08T07:16:48.000Z</published>
    <updated>2021-05-09T15:56:24.155Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Lightsail是AWS旗下的轻量级VPS产品，其主要客户目标是针对Digital Ocean, Vultr, Linode等商家的产品。最低配置3.5刀/月，512MB内存，1个虚拟CPU，20GB的SSD，1TB的双向流量。Lightsail可以免费绑定一个静态IP，按需小时费率计费，因此只需为实际使用量付费。如要删除实例，切记也要删掉静态IP，避免IP占用被收费。<br><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/kylenchen/CDN@latest/post/lightsail-ssh/1.png"></p><blockquote><p>在注册账户，创建实例后，发现了一个问题，不能通过ssh用root账户直连，AWS控制台比较卡，故需要解决lightsail无法用SSH root用户登录的问题，方便使用。</p></blockquote><h2 id="第一种办法（创建实例）"><a href="#第一种办法（创建实例）" class="headerlink" title="第一种办法（创建实例）"></a>第一种办法（创建实例）</h2><p><strong>1、创建实例的时候，点击添加启动脚本</strong><br><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/kylenchen/CDN@latest/post/lightsail-ssh/2.png"></p><p><strong>2、输入如下启动脚本（注意修改root密码）</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> root:password |sudo chpasswd root</span><br><span class="line">sudo sed -i <span class="string">&#x27;s/^#\?PermitRootLogin.*/PermitRootLogin yes/g&#x27;</span> /etc/ssh/sshd_config;</span><br><span class="line">sudo sed -i <span class="string">&#x27;s/^#\?PasswordAuthentication.*/PasswordAuthentication yes/g&#x27;</span> /etc/ssh/sshd_config;</span><br><span class="line">sudo reboot</span><br></pre></td></tr></table></figure><p>代码中的第一句中的 <code>password</code> 改为你自己的密码即可。成功创建实例以后就可以使用 root 和密码直接登录 SSH 了。</p><p><strong>3、等主机启动后就OK了</strong></p><h2 id="第二种办法（已经创建实例）"><a href="#第二种办法（已经创建实例）" class="headerlink" title="第二种办法（已经创建实例）"></a>第二种办法（已经创建实例）</h2><p><strong>1、连接aws的控制台：<code>&gt;_</code> 如图</strong><br><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/kylenchen/CDN@latest/post/lightsail-ssh/3.png"></p><p><strong>2、设置root账户的密码：<code>sudo passwd</code></strong><br><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/kylenchen/CDN@latest/post/lightsail-ssh/4.png"></p><p><strong>3、修改登录权限</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure><p>将 <code>PasswordAuthentication</code> 的 <code>no</code> 改成 <code>yes</code>。<br><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/kylenchen/CDN@latest/post/lightsail-ssh/5.png"></p><p><strong>4、重启sshd服务</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service sshd restart</span><br></pre></td></tr></table></figure><p>再然后我们就可以 ssh -p 22 <a href="mailto:root@ip">root@ip</a> ，是不是很爽。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Lightsail基本能满足大部分的需求，但是网络带宽和延迟表现一般，IO性能较差。此外，最低配主机首月免费，东京、首尔和新加坡机房是最优之选，毕竟AWS大厂，具有一定的性价比。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://colo.run/archives/lightsail-ssh-root-login">解决AWS lightsail无法用SSH root用户登录的问题</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="VPS" scheme="https://booku.ltd/categories/VPS/"/>
    
    
    <category term="教程" scheme="https://booku.ltd/tags/%E6%95%99%E7%A8%8B/"/>
    
    <category term="SSH" scheme="https://booku.ltd/tags/SSH/"/>
    
  </entry>
  
  <entry>
    <title>Openwrt路由服务配置与应用</title>
    <link href="https://booku.ltd/posts/router-openwrt/"/>
    <id>https://booku.ltd/posts/router-openwrt/</id>
    <published>2020-11-04T08:53:31.000Z</published>
    <updated>2021-05-09T15:56:24.155Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>U盘使用flippy版Openwrt开启docker。flippy大神限制，N1在安装Openwrt后必须要刷入emmc才会自动启动docker，且如果直接用service开启docker会出现缓存不足的错误。该问题主要是大神将docker的挂载点设置到了emmc，所以才会出现这个问题。<code>Docker-CE</code>说明： N1在 U盘上不启用docker，写入emmc后自动启用，数据目录是 <code>/mnt/mmcblk1p3/docker</code>，因此，解决问题的办法是只要把docker的挂载点加载出来就可以解决。可以利用U盘本身的剩余空间/外置存储设备作为挂载点。</p><p>比较方便的做法为：首先在windows上利用分区工具将U盘剩余空间新建EXT4分区，之后将U盘插入N1启动进入Openwrt<br>在系统——挂载点—–处找到创建的分区（一般为<code>/dev/sda3</code>）<br>点击：挂载点———–挂载点——–添加<br>选中：启用此挂载点————UUID处选择你创建的分区/外置存储设备————-挂载点自定义为<code>/mnt/mmcblk1p3/</code>——–保存&amp;应用</p><p>或者可以修改<code>daemon.json</code>文件，直接在终端输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/docker/daemon.json</span><br></pre></td></tr></table></figure><p>将”<code>data-root</code>“中<code>/mnt/mmcblk1p3/docker/</code>修改成你要的地址。如<code>/mnt/sda3/docker</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;bip&quot;</span>: <span class="string">&quot;172.31.0.1/24&quot;</span>,</span><br><span class="line"><span class="string">&quot;data-root&quot;</span>: <span class="string">&quot;/mnt/mmcblk1p3/docker/&quot;</span>,</span><br><span class="line"><span class="string">&quot;log-level&quot;</span>: <span class="string">&quot;warn&quot;</span>,</span><br><span class="line"><span class="string">&quot;log-driver&quot;</span>: <span class="string">&quot;json-file&quot;</span>,</span><br><span class="line"><span class="string">&quot;log-opts&quot;</span>: &#123;</span><br><span class="line"><span class="string">&quot;max-size&quot;</span>: <span class="string">&quot;10m&quot;</span>,</span><br><span class="line"><span class="string">&quot;max-file&quot;</span>: <span class="string">&quot;5&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">&quot;registry-mirrors&quot;</span>: [</span><br><span class="line"><span class="string">&quot;https://dockerhub.azk8s.cn&quot;</span></span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Aria2服务"><a href="#Aria2服务" class="headerlink" title="Aria2服务"></a>Aria2服务</h2><p>Aria2 是一个多平台轻量级，支持 <code>HTTP、FTP、BitTorrent</code> 等多协议、多来源的命令行下载工具。Aria2 可以从多个来源、多个协议下载资源，最大的程度上利用了你的带宽。Aria2 有着非常小的资源占用，在关闭磁盘缓存的情况下，物理内存占用通常为 4M（正常 <code>HTTP/FTP</code> 下载的情况下），BitTorrent 下载每秒<code>2.8M/S</code>的情况下，CPU 占有率约为 <code>6%</code>。Aria2 支持 JSON-RPC 和 XML-RPC 接口远程调用。</p><p>Openwrt启动Aria2服务之前，需对Aria2配置。新建aria2文件夹，修改默认下载目录为新建的aria2文件夹。注意保存之前一定新建好下载的文件夹，不然启动不了。设置aria2文件夹权限，否则下载失败</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 777 aria2/</span><br></pre></td></tr></table></figure><h2 id="Emby媒体服务"><a href="#Emby媒体服务" class="headerlink" title="Emby媒体服务"></a>Emby媒体服务</h2><p>使用docker安装<code>Emby Server</code>镜像。<code>hub.docker.com</code>网站<code>Emby Server</code>镜像包有几种，本次试验的CPU为arm架构，故选择<code>emby/embyserver_arm64v8</code>镜像。新建下面文件夹</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /mnt/mmcblk1p3/emby/config</span><br><span class="line">mkdir -p /mnt/mmcblk1p3/emby/videos</span><br></pre></td></tr></table></figure><p>拉取镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull emby/embyserver_arm64v8</span><br></pre></td></tr></table></figure><p><code>Emby Server</code>运行启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name emby --restart=always -v /mnt/mmcblk1p3/emby/config:/config -v /mnt/mmcblk1p3/emby/videos:/videos -d -p 8096:8096 emby/embyserver_arm64v8:latest</span><br></pre></td></tr></table></figure><p>设备启动后，容器也能自启动，OK。<br><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/kylenchen/CDN@latest/post/router-openwrt/1.png"></p><h2 id="Centos7与宝塔面板"><a href="#Centos7与宝塔面板" class="headerlink" title="Centos7与宝塔面板"></a>Centos7与宝塔面板</h2><p>基于F大的<code>Openwrt 40+</code>测试，其他固件或版本可能不适用此教程。</p><p><strong>1. 安装Docker管理工具Portainer</strong></p><p>由于F大的<code>Openwrt 40+</code>已安装docker，且已经给出简单安装Portainer的方法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/docker-web</span><br></pre></td></tr></table></figure><p>安装完成后，默认端口<code>9999</code>，建议先进入网页设置账户及密码，选本地 Local 连接进入网页一次。<br><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/kylenchen/CDN@latest/post/router-openwrt/2.png"></p><p><strong>2. 创建Centos7容器</strong></p><p>拉取Centos镜像，从镜像创建容器，这里特别说明使用“<code>/usr/sbin/init</code>”参数，路由重启后，会造成可视化窗口portainer无法启动（后面给到解决方案），使用此参数，而不是“<code>/bin/bash</code>”的好处，在于Centos7可以开机自启动，例如容器内的“<code>bt、ssh、crontab</code>”等都能随着路由的开机自动启动。（未测试）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker pull centos:7 <span class="comment">#拉取下载centos7镜像</span></span><br><span class="line">docker run -d --name bt --net=host -i -t --privileged=<span class="literal">true</span> --restart=always centos:7 /bin/bash <span class="comment">#从docker镜像创建名为bt的容器</span></span><br></pre></td></tr></table></figure><p>SSH进入容器Centos7</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it bt &#x2F;bin&#x2F;bash #进入容器</span><br></pre></td></tr></table></figure><p>安装SSH及其它常用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">yum update <span class="comment">#更新</span></span><br><span class="line">yum install -y wget <span class="comment">#安装wget</span></span><br><span class="line">yum install -y net-tools <span class="comment">#安装ifconfig查看器</span></span><br><span class="line">yum install -y openssl openssh-server <span class="comment">#安装ssh服务</span></span><br><span class="line">yum install -y initscripts <span class="comment">#安装Service服务</span></span><br></pre></td></tr></table></figure><p>添加SSH参数并启动SSH</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -q -t rsa -b 2048 -f /etc/ssh/ssh_host_rsa_key -N <span class="string">&#x27;&#x27;</span></span><br><span class="line">ssh-keygen -q -t ecdsa -f /etc/ssh/ssh_host_ecdsa_key -N <span class="string">&#x27;&#x27;</span></span><br><span class="line">ssh-keygen -t dsa -f /etc/ssh/ssh_host_ed25519_key -N <span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>编辑SSH配置文件，更改并启用端口。修改22端口避免和Openwrt冲突，这里改为822，并去除“#”注释开启<code>PermitRootLogin yes</code>允许root登录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/ssh/sshd_config   <span class="comment">#编辑文件</span></span><br></pre></td></tr></table></figure><p>启动SSH服务，当没有报错，并出现PID号，说明启动成功。你可以路由<code>ip+822</code>端口SSH访问容器Centos7。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/sbin/sshd -D &amp;</span><br></pre></td></tr></table></figure><p>如果安装了宝塔面板ssh登录端口，一定要进入登录宝塔网页后台，找到安全——防火墙，添加822 放行端口，不然可能无法连接容器ssh的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passwd  #修改容器账户名为root的ssh登录密码</span><br></pre></td></tr></table></figure><p><strong>3. 宝塔面板</strong></p><p>安装宝塔面板5.9，安装完成就可以登录了，宝塔面板7.0以上版本可能安装失败。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y wget &amp;&amp; wget -O install.sh http://download.bt.cn/install/install.sh &amp;&amp; sh install.sh</span><br></pre></td></tr></table></figure><p>宝塔安装过程中，如有错误代码如：<code>You are using pip version 9.0.1, however version 20.1.1 is available</code> ，可以使用下面命令升级</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum -y install epel-release python-pip</span><br><span class="line">yum -y install python-pip</span><br><span class="line">python -m pip install --upgrade pip</span><br></pre></td></tr></table></figure><p>LNMP总是出现各种错误，安装失败，执行日志报错如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;configure: error: the HTTP image filter module requires the GD library.</span><br><span class="line">You can either do not enable the module or install the libraries.</span><br><span class="line"></span><br><span class="line">make: *** No rule to make target &#96;build&#39;, needed by &#96;default&#39;.  Stop.</span><br></pre></td></tr></table></figure><p>载安装完gd图形库安装更新成功，命令如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install gd-devel</span><br></pre></td></tr></table></figure><p>另一报错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">configure: error: Invalid C++ compiler or C++ compiler flags</span><br><span class="line">make[1]: *** [pcre-8.43&#x2F;Makefile] Error 1</span><br><span class="line">make[1]: Leaving directory &#96;&#x2F;www&#x2F;server&#x2F;nginx&#x2F;src&#39;</span><br><span class="line">make: *** [install] Error 2</span><br></pre></td></tr></table></figure><p>执行命令，得以解决</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install gcc-c++</span><br></pre></td></tr></table></figure><p>还有错误</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">make[2]: Leaving directory &#96;&#x2F;www&#x2F;server&#x2F;nginx&#x2F;src&#x2F;openssl&#39;</span><br><span class="line">Operating system: aarch64-whatever-linux2</span><br><span class="line">You need Perl 5.</span><br><span class="line">make[1]: *** [&#x2F;www&#x2F;server&#x2F;nginx&#x2F;src&#x2F;openssl&#x2F;.openssl&#x2F;include&#x2F;openssl&#x2F;ssl.h] Error 1</span><br><span class="line">make[1]: Leaving directory &#96;&#x2F;www&#x2F;server&#x2F;nginx&#x2F;src&#39;</span><br><span class="line">make: *** [install] Error 2</span><br></pre></td></tr></table></figure><p>Nginx安装加载ssl错误openssl问题。执行<code>yum install openssl openssl-devel</code>命令，也未能解决。本想用下面命令升级宝塔面板版本，结果升级失败了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl http://download.bt.cn/install/update_to_6.sh|bash</span><br></pre></td></tr></table></figure><p>虽然升级宝塔面板失败了，但是安装<code>LNMP（Ngnix1.14，MySQL5.5，PHP7.2，phpMyAdmin4.4）</code>成功了 ，一脸懵逼，以后有时间再研究。重启路由后，宝塔面板不能自启动，可以参考恩山论坛的解决方法，这里不给方法。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/bt stop    <span class="comment">#停止</span></span><br><span class="line">/etc/init.d/bt start    <span class="comment">#启动</span></span><br><span class="line">/etc/init.d/bt restart    <span class="comment">#重启</span></span><br><span class="line">/etc/init.d/bt default    <span class="comment">#忘记帐号密码</span></span><br><span class="line">/etc/init.d/bt stop &amp;&amp; chkconfig --del bt &amp;&amp; rm -f /etc/init.d/bt &amp;&amp; rm -rf /www/server/panel    <span class="comment">#卸载</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/kylenchen/CDN@latest/post/router-openwrt/3.png"></p><h2 id="Rclone工具"><a href="#Rclone工具" class="headerlink" title="Rclone工具"></a>Rclone工具</h2><p>Rclone 是一款的命令行工具，支持在不同对象存储、网盘间同步、上传、下载数据。运行 Rclone 开始配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./rclone config</span><br></pre></td></tr></table></figure><p>挂载rclone磁盘目录与卸载rclone磁盘目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rclone mount 起的名字: /挂载的目录 --allow-other --allow-non-empty --vfs-cache-mode writes &amp;</span><br><span class="line">df -h <span class="comment">#查看是否挂载成功</span></span><br><span class="line">fusermount -qzu /挂载的目录</span><br></pre></td></tr></table></figure><p>其他详细步骤可以搜索相关教程，例如磁盘的自启动挂载。</p><h2 id="FileBrowser"><a href="#FileBrowser" class="headerlink" title="FileBrowser"></a>FileBrowser</h2><p>文件浏览器是一种创建你自己的云的软件，你可以在服务器上安装它，将它指向一个路径，然后通过一个漂亮的web界面访问你的文件。默认用户名/密码: admin/admin</p><p>第一次运行务必填好项目存放目录，然后保存应用。再手动下载，否则无法使用！<br><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/kylenchen/CDN@latest/post/router-openwrt/4.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="路由" scheme="https://booku.ltd/categories/%E8%B7%AF%E7%94%B1/"/>
    
    
    <category term="OpenWrt" scheme="https://booku.ltd/tags/OpenWrt/"/>
    
    <category term="路由器" scheme="https://booku.ltd/tags/%E8%B7%AF%E7%94%B1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>旁路由设置的三种方式</title>
    <link href="https://booku.ltd/posts/siderouter/"/>
    <id>https://booku.ltd/posts/siderouter/</id>
    <published>2020-11-04T08:52:08.000Z</published>
    <updated>2021-05-09T15:56:24.155Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>相信大家基本都会设置旁路由，但是由于市面上各种旁路由设置教程都不全面且鱼龙混杂，所以刚开始看见的人基本都一脸懵逼，为了让大家在捡垃圾的时候没有后顾之忧，从今天开始，我会更新一系列教程教大家完美设置网络设备。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/kylenchen/CDN@latest/post/siderouter/1.png"><br><strong>首先默认主路由和旁路由为以下情况：</strong></p><table><thead><tr><th align="center">主路由</th><th align="center">旁路由</th></tr></thead><tbody><tr><td align="center">IP：<code>192.168.11.1</code></td><td align="center">IP：<code>192.168.1.1</code></td></tr><tr><td align="center">网关：默认</td><td align="center">网关：默认</td></tr><tr><td align="center">广播：默认</td><td align="center">广播：默认</td></tr><tr><td align="center">自定义DNS服务器：默认</td><td align="center">自定义DNS服务器：默认</td></tr></tbody></table><p><strong>模式一：主路由 开 DHCP + 旁路由 关 DHCP (非全局)</strong></p><p>主路由无需做任何变动。</p><p><strong>旁路由：</strong></p><p><code>IPv4</code>地址修改为主路由网段中的一个地址，例如 <code>192.168.11.3</code>。</p><p>子网掩码设置与主路由相同，例如 <code>255.255.225.0</code>。</p><p>网关设置为主路由地址，例如 <code>192.168.11.1</code>。</p><p><code>DNS</code> 地址根据本地网络情况设置，推荐设置为主路由<code>IP</code>，例如 <code>192.168.11.1</code>。</p><div class="note info">            <p><strong>重要：若将DNS加速功能放在旁路由上，则统一将旁路由的DNS服务器设置为 127.0.0.1</strong>。</p>          </div><p>同时下方「DHCP服务器」，勾选「忽略此接口」。</p><p>保存并应用配置，然后将 旁路由 连接到主路由的 <code>LAN</code> 口。</p><p>具体如下：</p><table><thead><tr><th align="center">主路由</th><th align="center">旁路由</th></tr></thead><tbody><tr><td align="center">IP：<code>192.168.11.1</code></td><td align="center">IP：<code>192.168.11.3</code></td></tr><tr><td align="center">子网掩码：<code>255.255.255.0</code></td><td align="center">子网掩码：<code>255.255.255.0</code></td></tr><tr><td align="center">网关：默认</td><td align="center">网关：<code>192.168.11.1</code></td></tr><tr><td align="center">自定义<code>DNS</code>服务器：默认</td><td align="center">自定义<code>DNS</code>服务器：<code>192.168.11.1</code></td></tr></tbody></table><p>局域网内所有设置，需要手动指定需要旁路由服务的设备，网关地址和<code>DNS</code>服务器为<code>192.168.11.3</code>。</p><p><strong>模式二：主路由开 DHCP + 旁路由 关DHCP (全局)</strong></p><p><strong>方法一：</strong></p><p>旁路由的设置与模式一相同。</p><p>进入主路由，将主路由的 <code>DHCP</code> 的默认网关修改为旁路由的IP，例如<code>192.168.11.3</code>， <code>DNS</code> 服务器也修改为旁路由的<code>IP</code>，例如 <code>192.168.11.3</code>。</p><p><strong>方法二(适用于主路由为Openwrt)：</strong></p><p>旁路由的设置与模式一相同。</p><p>在主路由「DHCP 选项」中，添加两条参数，<code>3,192.168.11.3</code>，<code>6,192.168.11.3</code> 。</p><p>保存并应用配置即可。</p><p>表现如下：</p><table><thead><tr><th align="center">主路由</th><th align="center">旁路由</th></tr></thead><tbody><tr><td align="center">IP：<code>192.168.11.1</code></td><td align="center">IP：<code>192.168.11.3</code></td></tr><tr><td align="center">子网掩码：<code>255.255.255.0</code></td><td align="center">子网掩码：<code>255.255.255.0</code></td></tr><tr><td align="center">网关：<code>192.168.11.3</code></td><td align="center">网关：<code>192.168.11.1</code></td></tr><tr><td align="center">自定义<code>DNS</code>服务器：<code>192.168.11.3</code></td><td align="center">自定义<code>DNS</code>服务器：<code>192.168.11.1</code></td></tr></tbody></table><p><strong>模式三：主路由不开 DHCP+ 旁路由 开 DHCP (全局)</strong></p><p>主路由关闭<code>DHCP</code>，然后设置网关为旁路由的<code>IP</code>，例如<code>192.168.11.3</code>， <code>DNS</code> 服务器也修改为旁路由的<code>IP</code>，例如 <code>192.168.11.3</code>。</p><p>旁路由设置网关为主路由的<code>IP</code>，例如 <code>192.168.11.1</code>。</p><p><strong>可选：旁路由设置DNS服务器为主路由的IP，例如 192.168.11.1</strong>。</p><p>表现如下：</p><table><thead><tr><th align="center">主路由</th><th align="center">旁路由</th></tr></thead><tbody><tr><td align="center">IP：<code>192.168.11.1 </code></td><td align="center">IP：<code>192.168.11.3</code></td></tr><tr><td align="center">子网掩码：<code>255.255.255.0</code></td><td align="center">子网掩码：<code>255.255.255.0</code></td></tr><tr><td align="center">网关：<code>192.168.11.3</code></td><td align="center">网关：<code>192.168.11.1</code></td></tr><tr><td align="center">广播：默认</td><td align="center">广播：默认</td></tr><tr><td align="center">自定义DNS服务器：<code>192.168.11.3</code></td><td align="center">自定义DNS服务器：默认(或者<code>192.168.11.1</code>)</td></tr></tbody></table><div class="note warning">            <p>注意：N1盒子旁路由需要在防火墙自定义规则添加</p>          </div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -t nat -I POSTROUTING -o eth0 -j MASQUERADE</span><br></pre></td></tr></table></figure><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><p><strong>一、光猫使用路由模式，旁路由(关DHCP)连接光猫LAN</strong></p><p>电脑连接光猫千兆<code>LAN</code>，旁路由连接光猫百兆<code>LAN</code>，测速能跑满主路由带宽<code>200M</code>。电脑手动设置网关及<code>DNS</code>（<code>Internet</code>协议版本<code>4(TCP/IPv4)</code>属性）如下：</p><table><thead><tr><th align="center">旁路由</th><th align="center">电脑</th></tr></thead><tbody><tr><td align="center">IP：<code>192.168.1.99</code></td><td align="center">IP：<code>192.168.1.2</code></td></tr><tr><td align="center">子网掩码：<code>255.255.255.0</code></td><td align="center">子网掩码：<code>255.255.255.0</code></td></tr><tr><td align="center">网关：<code>192.168.11.1</code></td><td align="center">网关：<code>192.168.1.99</code></td></tr><tr><td align="center">广播：默认</td><td align="center">广播：—</td></tr><tr><td align="center">自定义DNS服务器：<code>192.168.1.1</code>（或者<code>114.114.114.114</code>）</td><td align="center">自定义DNS服务器：默认空（或者<code>192.168.1.1</code>）</td></tr></tbody></table><p>旁路由网络接口设置中，物理设置关闭“桥接接口”，网络接口默认的<code>br-lan</code>的，把它改成<code>eth0</code>，点击“保存”，切勿本页点击“保存应用”，以防路由器后台进不去，以致重刷固件。可点击右上角“未保存的配置”打开新的页面，再点击“保存应用”。关闭“桥接接口”后，测速跑满旁路由带宽100M(旁路由连的是光猫百兆<code>LAN</code>)。</p><p>两种情况下，”大陆白名单”和“全局模式”，均可以出国。但是“GFW列表”下，出国失败，分析原因可能是光猫劫持所以域名DNS。</p><p><strong>二、光猫使用路由模式，旁路由(关DHCP)连接光猫硬路由LAN</strong></p><p>此情形下，主路由(网关:<code>192.168.123.1</code>)连接的是光猫<code>LAN</code>，旁路由电脑连接主路由。旁路由网络接口勾选“桥接接口”，访问国内网络卡慢，网页刷新难。解决方法是关闭“桥接接口”，网络接口选择和保存方法如上。电脑和手机手动设置网关及<code>DNS</code>（<code>Internet</code>协议版本4(TCP/IPv4)属性）如下：</p><table><thead><tr><th align="center">旁路由</th><th align="center">电脑</th></tr></thead><tbody><tr><td align="center">IP：<code>192.168.123.99</code></td><td align="center">IP：<code>192.168.123.10</code></td></tr><tr><td align="center">子网掩码：<code>255.255.255.0</code></td><td align="center">子网掩码：<code>255.255.255.0</code></td></tr><tr><td align="center">网关：<code>192.168.123.1</code></td><td align="center">网关：<code>192.168.123.99</code></td></tr><tr><td align="center">广播：默认</td><td align="center">广播：—</td></tr><tr><td align="center">自定义DNS服务器：<code>192.168.123.1</code>（或者<code>114.114.114.114</code>）</td><td align="center">自定义DNS服务器：<code>192.168.123.99</code>（或者<code>192.168.123.1</code>）</td></tr></tbody></table><p>本次测试，电脑或手机的<code>DNS</code>服务器为空时，无法访问网络。”大陆白名单”模式下，电脑或手机DNS服务器设置为主路由<code>IP</code>和旁路由<code>IP</code>时，国内和出国访问正常，<code>DNS</code>服务器为空时，国内访问失败，出国正常。“GFW列表”模式下，电脑或手机DNS服务器设置为主路由<code>IP</code>时，国内访问正常，但不能出国；电脑脑或手机<code>DNS</code>服务器设置为旁路由<code>IP</code>时，国内和出国访问正常。</p><p>如果用做旁路由的话，出现国内访问慢，不要忘了加自定义防火墙规则（网络-&gt;防火墙-&gt;自定义规则）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -t nat -I POSTROUTING -o eth0 -j MASQUERADE</span><br></pre></td></tr></table></figure><p>也可以尝试（有桥接存在的情况下）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -t nat -I POSTROUTING -o br-lan -j MASQUERADE </span><br></pre></td></tr></table></figure><p>或者试试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -t nat -I POSTROUTING -j MASQUERADE</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://oeone.cn/archives/486.html">旁路由设置的三种方式</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="路由" scheme="https://booku.ltd/categories/%E8%B7%AF%E7%94%B1/"/>
    
    
    <category term="OpenWrt" scheme="https://booku.ltd/tags/OpenWrt/"/>
    
    <category term="路由器" scheme="https://booku.ltd/tags/%E8%B7%AF%E7%94%B1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>Hexo+Github Pages搭建博客攻略</title>
    <link href="https://booku.ltd/posts/hexo/"/>
    <id>https://booku.ltd/posts/hexo/</id>
    <published>2020-09-25T07:38:22.000Z</published>
    <updated>2021-05-09T15:56:24.155Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>博客有第三方平台，也可以自建，比较早的有博客园、CSDN，近几年新兴的也比较多诸如：WordPress、segmentFault、简书、掘金、知乎专栏、Github Page、Coding Pages、Gitee等等。</p><p>这次我要说的就是 Github Page + Hexo 搭建个人博客的方式！Github Page 是 Github 提供的一种免费的静态网页托管服务（免费空间有限制，但是足够用了），可以用来托管博客、项目官网等静态网页。支持 Jekyll、Hugo、Hexo 编译静态资源，这次我们的主角就是 Hexo 了，具体的内容下面在文章内介绍。</p><h2 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h2><p>准备 node 和 git 环境。 <a href="https://hexo.io/zh-cn/">Hexo</a> 是基于 <a href="https://nodejs.org/zh-cn/">Node.js</a> 驱动的一款博客框架，首先安装 Node.js，简单的说 Node.js 就是运行在服务端的 JavaScript。然后安装Git，Git是一个分布式版本控制系统，用于项目的版本控制管理，作者是 Linux 之父。</p><p>两个工具不同的平台安装方法有所不一样，可自行了解按步骤安装，这里不详述了。安装成功后打开git bash（Windows）或者终端（Mac），下方中将统一称为命令行。在命令行中输入相应命令验证是否成功，如果成功会有相应的版本号。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git version</span><br><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p>如果以上环境准备好了就可以使用 npm 开始安装 Hexo 了。也可查看 <a href="https://hexo.io/zh-cn/docs/">Hexo</a> 的详细文档。在命令行输入执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>安装 Hexo 完成后，再执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init myBlog</span><br><span class="line"><span class="built_in">cd</span> myBlog</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p>新建完成后，指定文件夹的目录如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── config.yml <span class="comment"># 网站的配置信息，您可以在此配置大部分的参数。</span></span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds <span class="comment"># 模版文件夹</span></span><br><span class="line">├── <span class="built_in">source</span>  <span class="comment"># 资源文件夹，除 _posts 文件，其他以下划线开头的文件或者文件夹不会被编译打包到public文件夹</span></span><br><span class="line">|   ├── _drafts <span class="comment"># 草稿文件</span></span><br><span class="line">|   └── _posts <span class="comment"># 文章Markdowm文件</span></span><br><span class="line">└── themes  <span class="comment"># 主题文件夹</span></span><br></pre></td></tr></table></figure><p>好了，如果上面的命令都没报错的话，就恭喜了，运行 <code>hexo s</code> 命令，其中 s 是 <code>server</code> 的缩写，在浏览器中输入 <a href="http://localhost/">http://localhost</a></a>:4000 回车就可以预览效果了。</p><h2 id="部署Github-Pages"><a href="#部署Github-Pages" class="headerlink" title="部署Github Pages"></a>部署Github Pages</h2><h3 id="新建仓库"><a href="#新建仓库" class="headerlink" title="新建仓库"></a>新建仓库</h3><p>首先如果你还没有 Github 账号的先注册一个，注册过程略。</p><p>Github上 new repository 创建新仓库。Github 仅能使用一个同名仓库的代码托管一个静态站点，仓库名称必须是<strong>用户名.github.io</strong>。打开仓库创建一个 <code>index.html</code> 文件，并随意先写点内容，比如 <code>Hello World</code>， 打开 http://你的用户名.github.io 站点，可看到预览效果。</p><h3 id="配置SSH"><a href="#配置SSH" class="headerlink" title="配置SSH"></a>配置SSH</h3><p>要使用 git 工具首先要配置一下<code>SSH key</code>，为部署本地博客到 Github 做准备。</p><p>打开命令行输入 <code>cd ~/.ssh</code> 如果没报错或者提示什么的说明就是以前生成过的，直接使用 <code>cat ~/.ssh/id_rsa.pub</code> 命令就是可以查看本机上的 SSH key 了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure><p>如果之前没有创建，则执行以下命令全局配置一下本地账户：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;用户名&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;邮箱地址&quot;</span></span><br></pre></td></tr></table></figure><p>然后开始生成密钥 <code>SSH key</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&#x27;上面的邮箱&#x27;</span></span><br></pre></td></tr></table></figure><p>按照提示回车，即可生成 <code>ssh key</code>。通过查看 <code>~/.ssh/id_rsa.pub</code> 文件内容，获取到你的 <code>SSH key</code>。首次使用还需要确认并添加主机到本机SSH可信列表。若返回 <code>Hi xxx! You&#39;ve successfully authenticated, but GitHub does not provide shell access</code>. 内容，则证明添加成功。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>到这还没完，还要登录 Github 上添加刚刚生成的 <code>SSH key</code>。 创建一个新的 <code>SSH key</code>, 标题随便，<code>key</code> 就填刚才生成那个，确认创建，搞定！！这样在你的 <code>SSH keys</code> 列表里就会看到你刚刚添加的密钥。</p><h3 id="部署Hexo"><a href="#部署Hexo" class="headerlink" title="部署Hexo"></a>部署Hexo</h3><p>此时，本地和 Github 的工作做得差不了，是时候把它们两个连接起来了。你也可以查看官网的部署教程。先不着急，部署之前还需要修改配置和安装部署插件。<br>第一：打开项目根目录下的 <code>_config.yml</code> 配置文件配置参数。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">git@github.com:XXX/XXX.github.io.git</span> <span class="comment">#github仓库地址</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span> <span class="comment"># github分支</span></span><br></pre></td></tr></table></figure><p>同时部署到多个仓库</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span></span><br><span class="line">     <span class="attr">github:</span> <span class="string">git@github.com:XXX/XXX.github.io.git,master</span></span><br><span class="line">     <span class="attr">gitee:</span> <span class="string">git@gitee.com:XXX/XXX.git,master</span></span><br></pre></td></tr></table></figure><p>第二：要安装一个部署插件 <code>hexo-deployer-git</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>最后执行以下命令就可以部署上传啦，以下 g 是 <code>generate</code> 缩写，d 是 <code>deploy</code> 缩写：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g -d</span><br></pre></td></tr></table></figure><p><code>hexo generate</code>，生成的静态内容在 public 文件夹内。<code>hexo clean</code>，执行此操作会删除 public 文件夹中的内容。 hexo 命令组合</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g -s，就是清除、生成、启动</span><br><span class="line">hexo clean &amp;&amp; hexo g -d，就是清除、生成、部署</span><br></pre></td></tr></table></figure><h3 id="写作"><a href="#写作" class="headerlink" title="写作"></a>写作</h3><p>博客搭好了，就开始写文章了，这里简单介绍一下，详细的文档可以看 hexo 官网。新建文章，输入以下命令即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new &lt;title&gt;</span><br></pre></td></tr></table></figure><p>此时在source_posts文件夹中便会多出一个文档 “<code>title.md</code>“。如果要删除，直接在此文件夹下删除对应的文件即可。在支持Markdown编辑器输入文章内容。再执行一下以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo clean <span class="comment"># 清除生成内容</span></span><br><span class="line">hexo g   <span class="comment"># 生成静态页面</span></span><br><span class="line">hexo s  <span class="comment"># 本地启动</span></span><br><span class="line">hexo d  <span class="comment"># 部署，本地查看没问题可以执行</span></span><br></pre></td></tr></table></figure><div class="note warning">            <p>部署前最好能先执行一下 <code>hexo clean</code> 命令，清除缓存文件 (db.json) 和已生成的静态文件 (public)。在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。</p>          </div><p>另外，如果你的文章暂时不发布可以先保存在草稿里面。生成草稿的方法和文章差不多 <code>hexo new draft &quot;文章标题&quot;</code>，生成后会在 <code>/source/_drafts</code>里看到你的草稿文章。当你想发布时只要执行 <code>publish</code> 命令即可发布到博客。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo publish [layout] &lt;filename&gt;</span><br></pre></td></tr></table></figure><h3 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h3><p><code>hexo d</code> 部署后每次需要重新改域名，为解决这个问题，需在 <code>/source</code> 的目录中创建一个文件，命名为 <code>CNAME</code>（无后缀文件格式），里边的内容写你的域名。只写域名即可。例如<code>www.xxx.com</code>，不需要添加<code>http(s)://</code>。</p><p>如果是多个值的配置，在博客根目录的配置文件中找到<code>skip_render</code>字段，添加值<code>&#39;CNAME&#39;</code>，这里我并未配置。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">skip_render:</span></span><br><span class="line">   <span class="bullet">-</span> <span class="string">&#x27;404/index.html&#x27;</span></span><br><span class="line">   <span class="bullet">-</span> <span class="string">&#x27;CNAME&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="Hexo升级"><a href="#Hexo升级" class="headerlink" title="Hexo升级"></a>Hexo升级</h3><ul><li><p>全局升级 <code>hexo-cli</code>，先 <code>hexo version</code> 查看当前版本，然后 <code>npm i hexo-cli -g</code>，再次 <code>hexo version</code> 查看是否升级成功。</p></li><li><p>使用 <code>npm install -g npm-check</code> 和 <code>npm-check</code>，检查系统中的插件是否有升级的，可以看到自己前面都安装了那些插件</p></li><li><p>使用 <code>npm install -g npm-upgrade</code> 和 <code>npm-upgrade</code>，升级系统中的插件。</p></li><li><p>使用 <code>npm update -g</code> 和 <code>npm update --save</code>。</p></li></ul><p>注意 Hexo 版本有较大变化时，升级后可能会出现很多问题，升级前做好相关备份。</p><h2 id="Github-Actions自动部署"><a href="#Github-Actions自动部署" class="headerlink" title="Github Actions自动部署"></a>Github Actions自动部署</h2><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>Github新建一个私有仓库，专门用来存放Hexo博客源文件。获取一个 <code>GitHub Personal Access Token</code> 用来推送构建好的文件到我们的 GitHub Pages 仓库。源文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── config.yml <span class="comment"># 网站的配置信息，您可以在此配置大部分的参数。</span></span><br><span class="line">├── package.json</span><br><span class="line">├── package-lock.json</span><br><span class="line">├── scaffolds <span class="comment"># 模版文件夹</span></span><br><span class="line">├── <span class="built_in">source</span>  <span class="comment"># 资源文件夹</span></span><br><span class="line">|   ├── _drafts <span class="comment"># 草稿文件</span></span><br><span class="line">|   └── _posts <span class="comment"># 文章Markdowm文件</span></span><br><span class="line">└── themes  <span class="comment"># 主题文件夹</span></span><br></pre></td></tr></table></figure><p>点开博客备份仓库上方的 Settings，点到左侧的 Secrets 项，添加四个秘密环境变量 <code>GH_REPO</code> 、<code>GH_USER</code>、<code>GH_MAIL</code>、<code>GH_TOKEN</code>，值分别填写自己的 GitHub Pages 仓库地址（不包含 https:// ）、用户名、邮箱和刚刚申请到的 <code>GitHub Personal Access Token</code>。</p><p>准备工作做好后就可以开始编写 GitHub Actions 配置文件了，这里对 Hexo 博客编译部署的步骤进行拆分讲解。</p><h3 id="触发条件和运行环境"><a href="#触发条件和运行环境" class="headerlink" title="触发条件和运行环境"></a>触发条件和运行环境</h3><p>我们设置在 master 分支上发生 <code>push</code> 操作时触发构建，使用最新的 Ubuntu 系统作为编译部署的环境，同时设置一个全局环境变量将时区修改为 Asia/Shanghai 同步时区，具体的配置内容如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">name: Blog deploy</span><br><span class="line"></span><br><span class="line">on:</span><br><span class="line">  push:</span><br><span class="line">    branches:</span><br><span class="line">      - master</span><br><span class="line"></span><br><span class="line">env:</span><br><span class="line">  TZ: Asia/Shanghai</span><br><span class="line"></span><br><span class="line">jobs:</span><br><span class="line">  blog-cicd:</span><br><span class="line">    name: Hexo blog build &amp; deploy</span><br><span class="line">    runs-on: ubuntu-latest</span><br><span class="line">  steps:</span><br></pre></td></tr></table></figure><h3 id="建立工作环境"><a href="#建立工作环境" class="headerlink" title="建立工作环境"></a>建立工作环境</h3><p>上面的大前提确定后就可以来开始建立我们的工作环境了（注： 后续所有步骤的配置都是接在上面 steps 块下的，不要弄混了层级关系）。</p><p>首先检出代码，设置一下 node 环境，我们这里使用 12.x 版本的 node.js ：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- name: Checkout codes</span><br><span class="line">  uses: actions/checkout@v2</span><br><span class="line"></span><br><span class="line">- name: Setup node</span><br><span class="line">  uses: actions/setup-node@v1</span><br><span class="line">  with:</span><br><span class="line">    node-version: &#x27;12.x&#x27;</span><br></pre></td></tr></table></figure><p>然后设置一下缓存目录以避免每次都要重新下载，从而加快构建速度（官方不建议直接缓存 <code>node_modules</code> 目录，所以这里设置的是 npm 的下载缓存目录 <code>~/.npm</code>，这样后面仍需要使用 <code>npm install</code> 来安装依赖）。这里使用的是 <code>package-lock.json</code> 文件的 hash 值来标识缓存是否可以命中：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- name: Cache node modules</span><br><span class="line">  uses: actions/cache@v1</span><br><span class="line">  with:</span><br><span class="line">    path: ~/.npm</span><br><span class="line">    key: $&#123;&#123; runner.os &#125;&#125;-node-$&#123;&#123; hashFiles(&#x27;**/package-lock.json&#x27;) &#125;&#125;</span><br></pre></td></tr></table></figure><p>最后就是安装依赖了，这个根据自己的需要操作就行，可使用 <code>gulp</code> 任务来压缩 Hexo 生成的文件，所以这里除了 <code>hexo-cli</code> 还全局安装了 <code>gulp</code> ：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- name: Install dependencies</span><br><span class="line">  run: |</span><br><span class="line">    npm install hexo-cli gulp -g</span><br><span class="line">    npm install</span><br></pre></td></tr></table></figure><h3 id="生成部署文件"><a href="#生成部署文件" class="headerlink" title="生成部署文件"></a>生成部署文件</h3><p>这一步简单点 <code>hexo g</code> 就行了，我这里多加了一步执行 <code>gulp</code> 任务的操作（将其放在两个 step 中而不是一次性执行是为了方便在日志中看到每个操作消耗的时间）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- name: Generate files</span><br><span class="line">  run: hexo generate</span><br><span class="line"></span><br><span class="line">- name: Execute gulp task</span><br><span class="line">  run: gulp</span><br></pre></td></tr></table></figure><h3 id="部署博客"><a href="#部署博客" class="headerlink" title="部署博客"></a>部署博客</h3><p>我们先将 GitHub Pages 仓库克隆过来（这里克隆到新建 <code>deploy_git</code> 文件夹内），将其中的 <code>.git</code> 目录移到存放部署文件的 public 目录中（为了保留 GitHub Pages 仓库的提交历史），然后进入 <code>public</code> 目录设置一下提交用户名和邮箱，<code>add</code> 所有文件并提交，最后利用保存在秘密环境变量中的 <code>GitHub Personal Access Token</code> 推送到 GitHub Pages 仓库中就可以了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">- name: Deploy blog</span><br><span class="line">  run: |</span><br><span class="line">    git <span class="built_in">clone</span> <span class="string">&quot;https://<span class="variable">$&#123;&#123; secrets.GH_REF &#125;</span>&#125;&quot;</span> deploy_git</span><br><span class="line">    mv ./deploy_git/.git ./public/</span><br><span class="line">    <span class="built_in">cd</span> ./public</span><br><span class="line">    git config user.name <span class="string">&quot;yourname&quot;</span></span><br><span class="line">    git config user.email <span class="string">&quot;youremail&quot;</span></span><br><span class="line">    git add .</span><br><span class="line">    git commit -m <span class="string">&quot;GitHub Actions Auto Builder at <span class="subst">$(date +&#x27;%Y-%m-%d %H:%M:%S&#x27;)</span>&quot;</span></span><br><span class="line">    git push --force --quiet <span class="string">&quot;https://<span class="variable">$&#123;&#123; secrets.GH_TOKEN &#125;</span>&#125;@<span class="variable">$&#123;&#123; secrets.GH_REF &#125;</span>&#125;&quot;</span> master:master</span><br></pre></td></tr></table></figure><h3 id="完整配置文件"><a href="#完整配置文件" class="headerlink" title="完整配置文件"></a>完整配置文件</h3><p>这里我并没使用 gulp 任务来压缩 Hexo 生成的文件， 不用执行执行 gulp 任务。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">name: Blog deploy</span><br><span class="line"></span><br><span class="line">on:</span><br><span class="line">  push:</span><br><span class="line">    branches:</span><br><span class="line">      - master</span><br><span class="line"></span><br><span class="line">env:</span><br><span class="line">  TZ: Asia/Shanghai</span><br><span class="line"></span><br><span class="line">jobs:</span><br><span class="line">  blog-cicd:</span><br><span class="line">    name: Hexo blog build &amp; deploy</span><br><span class="line">    runs-on: ubuntu-latest</span><br><span class="line"></span><br><span class="line">    steps:</span><br><span class="line">    - name: Checkout codes</span><br><span class="line">      uses: actions/checkout@v2</span><br><span class="line"></span><br><span class="line">    - name: Setup node</span><br><span class="line">      uses: actions/setup-node@v1</span><br><span class="line">      with:</span><br><span class="line">        node-version: &#x27;12.x&#x27;</span><br><span class="line"></span><br><span class="line">    - name: Cache node modules</span><br><span class="line">      uses: actions/cache@v1</span><br><span class="line">      with:</span><br><span class="line">        path: ~/.npm</span><br><span class="line">        key: $&#123;&#123; runner.os &#125;&#125;-node-$&#123;&#123; hashFiles(&#x27;**/package-lock.json&#x27;) &#125;&#125;</span><br><span class="line"></span><br><span class="line">    - name: Install dependencies</span><br><span class="line">      run: |</span><br><span class="line">        npm install hexo-cli -g</span><br><span class="line">        npm install</span><br><span class="line">    - name: Generate files</span><br><span class="line">      run: hexo generate</span><br><span class="line"></span><br><span class="line">    - name: Deploy blog</span><br><span class="line">      run: |</span><br><span class="line">        git clone &quot;https://$&#123;&#123; secrets.GH_REPO &#125;&#125;&quot; deploy_git</span><br><span class="line">        mv ./deploy_git/.git ./public/</span><br><span class="line">        cd ./public</span><br><span class="line">        git config user.name &quot;$&#123;&#123; secrets.GH_USER &#125;&#125;&quot;</span><br><span class="line">        git config user.email &quot;$&#123;&#123; secrets.GH_MAIL &#125;&#125;&quot;</span><br><span class="line">        git add .</span><br><span class="line">        git commit -m &quot;Site updated: $(date +&#x27;%Y-%m-%d %H:%M:%S&#x27;)&quot;</span><br><span class="line">        git push --force --quiet &quot;https://$&#123;&#123; secrets.GH_TOKEN &#125;&#125;@$&#123;&#123; secrets.GH_REPO &#125;&#125;&quot; master:master</span><br></pre></td></tr></table></figure><h2 id="Hexo配置"><a href="#Hexo配置" class="headerlink" title="Hexo配置"></a>Hexo配置</h2><h3 id="标签外挂"><a href="#标签外挂" class="headerlink" title="标签外挂"></a>标签外挂</h3><p>标签外挂的使用需要主题支持此功能，不然其他主题无效，且会报错。我这里使用的主题经过修改后可使用。</p><h4 id="note提示块"><a href="#note提示块" class="headerlink" title="note提示块"></a>note提示块</h4><p>note提示块提供了simple、modern、flat、disabled四个样式，不可以同时混合样式使用，可在主题目录下<code>_config.yml</code>文件选择样式。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">note:</span></span><br><span class="line">  <span class="comment"># Note tag style values:</span></span><br><span class="line">  <span class="comment">#  - simple    bs-callout old alert style. Default.</span></span><br><span class="line">  <span class="comment">#  - modern    bs-callout new (v2-v3) alert style.</span></span><br><span class="line">  <span class="comment">#  - flat      flat callout style with background, like on Mozilla or StackOverflow.</span></span><br><span class="line">  <span class="comment">#  - disabled  disable all CSS styles import of note tag.</span></span><br><span class="line">  <span class="attr">style:</span> <span class="string">flat</span></span><br><span class="line">  <span class="attr">icons:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">border_radius:</span> <span class="number">3</span></span><br><span class="line">  <span class="comment"># Offset lighter of background in % for modern and flat styles (modern: -12 | 12; flat: -18 | 6).</span></span><br><span class="line">  <span class="comment"># Offset also applied to label tag variables. This option can work with disabled note tag.</span></span><br><span class="line">  <span class="attr">light_bg_offset:</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p>这里以 <code>style: flat</code> 为例演示， 在文章使用方法如下：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note default %&#125;</span><br><span class="line">默认块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary %&#125;</span><br><span class="line">基本块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success %&#125;</span><br><span class="line">成功块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info %&#125;</span><br><span class="line">提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning %&#125;</span><br><span class="line">警告块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger %&#125;</span><br><span class="line">危险块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><div class="note default">            <p>默认块标签</p>          </div><div class="note primary">            <p>基本块标签</p>          </div><div class="note success">            <p>成功块标签</p>          </div><div class="note info">            <p>提示块标签</p>          </div><div class="note warning">            <p>警告块标签</p>          </div><div class="note danger">            <p>危险块标签</p>          </div><h4 id="tabs标签卡"><a href="#tabs标签卡" class="headerlink" title="tabs标签卡"></a>tabs标签卡</h4><p><code>Unique name</code>最好写上，不然编译时会提示，基本使用方法如下：</p><div class="tabs" id="教程"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#教程-1">语法</button></li><li class="tab"><button type="button" data-href="#教程-2">示例</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="教程-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs Unique name, [index] %&#125;</span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- tab [Tab caption] [@icon] --&gt;</span></span></span><br><span class="line">Any content (support inline tags too).</span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- endtab --&gt;</span></span></span><br><span class="line">&#123;% endtabs %&#125;</span><br><span class="line"></span><br><span class="line">Unique name   : Unique name of tabs block tag without comma.</span><br><span class="line"><span class="code">                Will be used in #id&#x27;s as prefix for each tab with their index numbers.</span></span><br><span class="line"><span class="code">                If there are whitespaces in name, for generate #id all whitespaces will replaced by dashes.</span></span><br><span class="line"><span class="code">                Only for current url of post/page must be unique!</span></span><br><span class="line"><span class="code">[index]       : Index number of active tab.</span></span><br><span class="line"><span class="code">                If not specified, first tab (1) will be selected.</span></span><br><span class="line"><span class="code">                If index is -1, no tab will be selected. It&#x27;s will be something like spoiler.</span></span><br><span class="line"><span class="code">                Optional parameter.</span></span><br><span class="line"><span class="code">[Tab caption] : Caption of current tab.</span></span><br><span class="line"><span class="code">                If not caption specified, unique name with tab index suffix will be used as caption of tab.</span></span><br><span class="line"><span class="code">                If not caption specified, but specified icon, caption will empty.</span></span><br><span class="line"><span class="code">                Optional parameter.</span></span><br><span class="line"><span class="code">[@icon]       : FontAwesome icon name (full-name, look like &#x27;fas fa-font&#x27;)</span></span><br><span class="line"><span class="code">                Can be specified with or without space; e.g. &#x27;Tab caption @icon&#x27; similar to &#x27;Tab caption@icon&#x27;.</span></span><br><span class="line"><span class="code">                Optional parameter.</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" onclick="scrollToDest($(this).parents('.tabs'),65)"><i class="fa fa-arrow-up"></i></button></div><div class="tab-item-content" id="教程-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs 宗师%&#125;</span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- tab 黄霑--&gt;</span></span></span><br><span class="line"><span class="strong">**沧海一声笑**</span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- endtab --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- tab 古龙--&gt;</span></span></span><br><span class="line"><span class="strong">**多情剑客无情剑**</span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- endtab --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- tab 金庸@fa fa-hand-o-right--&gt;</span></span></span><br><span class="line"><span class="strong">**金庸（1924年3月10日—2018年10月30日），本名查良镛，生于浙江省海宁市，1948年移居香港。当代武侠小说作家、新闻学家、企业家、政治评论家、社会活动家，被誉为“香港四大才子”之一，与古龙、梁羽生、温瑞安并称为中国武侠小说四大宗师。**</span></span><br><span class="line">&#123;% subtabs 小说%&#125;</span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- tab 射雕英雄传--&gt;</span></span></span><br><span class="line">桃花影落飞神剑，碧海潮生按玉箫。</span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- endtab --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- tab 神雕侠侣--&gt;</span></span></span><br><span class="line">相思无用，惟别而已。别期若有定，千般煎熬又何如？莫道黯然销魂，何处柳暗花明？</span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- endtab --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- tab 天龙八部--&gt;</span></span></span><br><span class="line">红颜弹指老，刹那芳华，与其天涯思君，恋恋不舍，莫若相忘于江湖..</span><br><span class="line">&#123;% subsubtabs 主角%&#125;</span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- tab 乔峰--&gt;</span></span></span><br><span class="line">坑爹</span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- endtab --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- tab 虚竹--&gt;</span></span></span><br><span class="line">尼玛</span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- endtab --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- tab 段誉--&gt;</span></span></span><br><span class="line">你妹</span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- endtab --&gt;</span></span></span><br><span class="line">&#123;% endsubsubtabs %&#125;</span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- endtab --&gt;</span></span></span><br><span class="line">&#123;% endsubtabs %&#125;</span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- endtab --&gt;</span></span></span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" onclick="scrollToDest($(this).parents('.tabs'),65)"><i class="fa fa-arrow-up"></i></button></div></div></div><p>示例效果</p><div class="tabs" id="宗师"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#宗师-1">黄霑</button></li><li class="tab"><button type="button" data-href="#宗师-2">古龙</button></li><li class="tab"><button type="button" data-href="#宗师-3"><i class="fa fa-hand-o-right"></i>金庸</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="宗师-1"><p><strong>沧海一声笑</strong></p><button type="button" class="tab-to-top" onclick="scrollToDest($(this).parents('.tabs'),65)"><i class="fa fa-arrow-up"></i></button></div><div class="tab-item-content" id="宗师-2"><p><strong>多情剑客无情剑</strong></p><button type="button" class="tab-to-top" onclick="scrollToDest($(this).parents('.tabs'),65)"><i class="fa fa-arrow-up"></i></button></div><div class="tab-item-content" id="宗师-3"><p><strong>金庸（1924年3月10日—2018年10月30日），本名查良镛，生于浙江省海宁市，1948年移居香港。当代武侠小说作家、新闻学家、企业家、政治评论家、社会活动家，被誉为“香港四大才子”之一，与古龙、梁羽生、温瑞安并称为中国武侠小说四大宗师。</strong></p><div class="tabs" id="小说"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#小说-1">射雕英雄传</button></li><li class="tab"><button type="button" data-href="#小说-2">神雕侠侣</button></li><li class="tab"><button type="button" data-href="#小说-3">天龙八部</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="小说-1"><p>桃花影落飞神剑，碧海潮生按玉箫。</p><button type="button" class="tab-to-top" onclick="scrollToDest($(this).parents('.tabs'),65)"><i class="fa fa-arrow-up"></i></button></div><div class="tab-item-content" id="小说-2"><p>相思无用，惟别而已。别期若有定，千般煎熬又何如？莫道黯然销魂，何处柳暗花明？</p><button type="button" class="tab-to-top" onclick="scrollToDest($(this).parents('.tabs'),65)"><i class="fa fa-arrow-up"></i></button></div><div class="tab-item-content" id="小说-3"><p>红颜弹指老，刹那芳华，与其天涯思君，恋恋不舍，莫若相忘于江湖..</p><div class="tabs" id="主角"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#主角-1">乔峰</button></li><li class="tab"><button type="button" data-href="#主角-2">虚竹</button></li><li class="tab"><button type="button" data-href="#主角-3">段誉</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="主角-1"><p>坑爹</p><button type="button" class="tab-to-top" onclick="scrollToDest($(this).parents('.tabs'),65)"><i class="fa fa-arrow-up"></i></button></div><div class="tab-item-content" id="主角-2"><p>尼玛</p><button type="button" class="tab-to-top" onclick="scrollToDest($(this).parents('.tabs'),65)"><i class="fa fa-arrow-up"></i></button></div><div class="tab-item-content" id="主角-3"><p>你妹</p><button type="button" class="tab-to-top" onclick="scrollToDest($(this).parents('.tabs'),65)"><i class="fa fa-arrow-up"></i></button></div></div></div><button type="button" class="tab-to-top" onclick="scrollToDest($(this).parents('.tabs'),65)"><i class="fa fa-arrow-up"></i></button></div></div></div><button type="button" class="tab-to-top" onclick="scrollToDest($(this).parents('.tabs'),65)"><i class="fa fa-arrow-up"></i></button></div></div></div><h4 id="button按钮"><a href="#button按钮" class="headerlink" title="button按钮"></a>button按钮</h4><p>可参考示例代码的使用，基本使用方法如下：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btn [url],[text],[icon],[color] [style] [layout] [position] [size] %&#125;</span><br><span class="line"></span><br><span class="line">[url]         : 链接</span><br><span class="line">[text]        : 按钮文字</span><br><span class="line">[icon]        : [可选] 图标</span><br><span class="line">[color]       : [可选] 按钮背景顔色(默认style时）</span><br><span class="line"><span class="code">                      按钮字体和边框顔色(outline时)</span></span><br><span class="line"><span class="code">                      default/blue/pink/red/purple/orange/green</span></span><br><span class="line"><span class="code">[style]       : [可选] 按钮样式 默认实心</span></span><br><span class="line"><span class="code">                      outline/留空</span></span><br><span class="line"><span class="code">[layout]      : [可选] 按钮佈局 默认为line</span></span><br><span class="line"><span class="code">                      block/留空</span></span><br><span class="line"><span class="code">[position]    : [可选] 按钮位置 前提是设置了layout为block 默认为左边</span></span><br><span class="line"><span class="code">                      center/right/留空</span></span><br><span class="line"><span class="code">[size]        : [可选] 按钮大小</span></span><br><span class="line"><span class="code">                      larger/留空。</span></span><br></pre></td></tr></table></figure><p>示例代码</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Github website &#123;% btn &#x27;https://github.com/&#x27;,Github %&#125;</span><br><span class="line">Github website &#123;% btn &#x27;https://github.com/&#x27;,Github,fa fa-hand-o-right %&#125;</span><br><span class="line">Github website &#123;% btn &#x27;https://github.com/&#x27;,Github,fa fa-hand-o-right,outline %&#125;</span><br><span class="line">Github website &#123;% btn &#x27;https://github.com/&#x27;,Github,fa fa-hand-o-right,outline red larger %&#125;</span><br><span class="line">Github website &#123;% btn &#x27;https://github.com/&#x27;,Github,fa fa-hand-o-right,blue larger %&#125;</span><br><span class="line">Github website &#123;% btn &#x27;https://github.com/&#x27;,Github,fa fa-hand-o-right,block %&#125;</span><br><span class="line">Github website &#123;% btn &#x27;https://github.com/&#x27;,Github,fa fa-hand-o-right,block center larger %&#125;</span><br><span class="line">Github website &#123;% btn &#x27;https://github.com/&#x27;,Github,fa fa-hand-o-right,block right larger %&#125;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;btn-center&quot;</span>&gt;</span></span></span><br><span class="line">Github website &#123;% btn &#x27;https://github.com/&#x27;,Github,fa fa-hand-o-right,pink larger %&#125;</span><br><span class="line">Github website &#123;% btn &#x27;https://github.com/&#x27;,Github,fa fa-hand-o-right,outline purple larger %&#125;</span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>演示效果如下，并不代表上面的示例代码。</p><a class="btn-beautify button--animated outline larger" href="https://github.com/"  title="github"><i class="fa fa-hand-o-right fa-fw"></i><span>github</span></a><a class="btn-beautify button--animated outline blue larger" href="https://github.com/"  title="github"><i class="fa fa-hand-o-right fa-fw"></i><span>github</span></a><a class="btn-beautify button--animated outline pink larger" href="https://github.com/"  title="github"><i class="fa fa-hand-o-right fa-fw"></i><span>github</span></a><a class="btn-beautify button--animated red larger" href="https://github.com/"  title="github"><i class="fa fa-hand-o-right fa-fw"></i><span>github</span></a><a class="btn-beautify button--animated purple larger" href="https://github.com/"  title="github"><i class="fa fa-hand-o-right fa-fw"></i><span>github</span></a><a class="btn-beautify button--animated orange larger" href="https://github.com/"  title="github"><i class="fa fa-hand-o-right fa-fw"></i><span>github</span></a><a class="btn-beautify button--animated green larger" href="https://github.com/"  title="github"><i class="fa fa-hand-o-right fa-fw"></i><span>github</span></a><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><p><a href="https://segmentfault.com/a/1190000017986794">超详细Hexo+Github Page搭建技术博客教程</a></p></li><li><p><a href="https://xirikm.net/2020/313-1">使用 GitHub Actions 自动构建 Hexo 博客</a></p></li><li><p><a href="https://fushaolei.github.io/2020/09/21/online-hexo/">GitHub Action + Hexo实现在线写作</a></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="软件" scheme="https://booku.ltd/categories/%E8%BD%AF%E4%BB%B6/"/>
    
    
    <category term="Github" scheme="https://booku.ltd/tags/Github/"/>
    
    <category term="Hexo" scheme="https://booku.ltd/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>GitHub Actions教程与自动同步Fork仓库</title>
    <link href="https://booku.ltd/posts/github-actions/"/>
    <id>https://booku.ltd/posts/github-actions/</id>
    <published>2020-09-22T08:24:22.000Z</published>
    <updated>2021-05-09T15:56:24.155Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Github Ac­tions 是 GitHub 推出的持续集成 (Con­tin­u­ous in­te­gra­tion，简称 CI) 服务，它提供了配置非常不错的虚拟服务器环境，基于它可以进行构建、测试、打包、部署项目。简单来讲就是将软件开发中的一些流程交给云服务器自动化处理，比方说开发者把代码 push 到 GitHub 后它会自动测试、编译、发布。有了持续集成服务开发者就可以专心于写代码，其它乱七八糟的事情就不用管了，这样可以大大提高开发效率。本篇文章将介绍 GitHub Ac­tions 的基本使用方法。</p><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><ul><li><p><strong>workflow</strong> （工作流程）：持续集成一次运行的过程。</p></li><li><p><strong>job</strong> （任务）：一个 workflow 由一个或多个 job 构成，含义是一次持续集成的运行，可以完成多个任务。</p></li><li><p><strong>step</strong>（步骤）：每个 job 由多个 step 构成，一步步完成。</p></li><li><p><strong>action</strong> （动作）：每个 step 可以依次执行一个或多个命令（action）</p></li></ul><h2 id="虚拟环境"><a href="#虚拟环境" class="headerlink" title="虚拟环境"></a>虚拟环境</h2><p>GitHub Ac­tions 为每个任务 (job) 都提供了一个虚拟机来执行，每台虚拟机都有相同的硬件资源：</p><ul><li><p>2-core CPU</p></li><li><p>7 GB RAM 内存</p></li><li><p>14 GB SSD 硬盘空间</p></li></ul><p>使用限制：</p><ul><li><p>每个仓库只能同时支持20个 workflow 并行。</p></li><li><p>每小时可以调用1000次 GitHub API 。</p></li><li><p>每个 job 最多可以执行6个小时。</p></li><li><p>免费版的用户最大支持20个 job 并发执行，macOS 最大只支持5个。</p></li><li><p>私有仓库每月累计使用时间为2000分钟，超过后$ 0.008/分钟，公共仓库则无限制</p></li></ul><p>操作系统方面可选择 Win­dows server、Linux、ma­cOS，并预装了大量软件包和工具。</p><div class="note info">            <p>虽然名称叫持续集成，但当所有任务终止和完成时，虚拟环境内的数据会随之清空，并不会持续。即每个新任务都是一个全新的虚拟环境。</p>          </div><h2 id="workflow文件"><a href="#workflow文件" class="headerlink" title="workflow文件"></a>workflow文件</h2><p>GitHub Ac­tions 的配置文件叫做 work­flow 文件（官方中文翻译为 “工作流程文件”），存放在代码仓库的<code>.github/workflows</code> 目录中。work­flow 文件采用 YAML 格式，文件名可以任意取，但是后缀名统一为<code>.yml</code>。一个库可以有多个 work­flow 文件，GitHub 只要发现<code>.github/workflows</code> 目录里面有<code>.yml</code> 文件，就会按照文件中所指定的触发条件在符合条件时自动运行该文件中的工作流程。在 Ac­tions 页面可以看到很多种语言的 work­flow 文件的模版，可以用于简单的构建与测试。</p><p>下面是一个简单的 work­flow 文件示例：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Hello</span> <span class="string">World</span></span><br><span class="line"><span class="attr">on:</span> <span class="string">push</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">my_first_job:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">My</span> <span class="string">first</span> <span class="string">job</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">checkout</span></span><br><span class="line">    <span class="attr">uses:</span> <span class="string">actions/checkout@master</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Run</span> <span class="string">a</span> <span class="string">single-line</span> <span class="string">script</span></span><br><span class="line">    <span class="attr">run:</span> <span class="string">echo</span> <span class="string">&quot;Hello World!&quot;</span></span><br><span class="line">  <span class="attr">my_second_job:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">My</span> <span class="string">second</span> <span class="string">job</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">macos-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Run</span> <span class="string">a</span> <span class="string">multi-line</span> <span class="string">script</span></span><br><span class="line">      <span class="attr">env:</span></span><br><span class="line">        <span class="attr">MY_VAR:</span> <span class="string">Hello</span> <span class="string">World!</span></span><br><span class="line">        <span class="attr">MY_NAME:</span> <span class="string">P3TERX</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">        <span class="string">echo</span> <span class="string">$MY_VAR</span></span><br><span class="line">        <span class="string">echo</span> <span class="string">My</span> <span class="string">name</span> <span class="string">is</span> <span class="string">$MY_NAME</span></span><br></pre></td></tr></table></figure><p><strong>name</strong></p><p><code>name</code> 字段是 work­flow 的名称。若忽略此字段，则默认会设置为 work­flow 文件名。</p><p><strong>on</strong></p><p><code>on</code> 字段指定 <code>work­flow</code> 的触发条件，通常是某些事件，比如示例中的触发事件是 <code>push</code>，即在代码 <code>push</code> 到仓库后被触发。<code>on</code> 字段也可以是事件的数组，多种事件触发，比如在 <code>push</code> 或 <code>pull_request</code> 时触发：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">on:</span> [<span class="string">push</span>, <span class="string">pull_request</span>]</span><br></pre></td></tr></table></figure><p>完整的事件列表，请查看官方文档。下面是一些比较常见的事件：</p><p>push 指定分支触发</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">   <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p>push tag 时触发</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">   <span class="attr">tags:</span></span><br><span class="line">   <span class="bullet">-</span> <span class="string">&#x27;v*&#x27;</span></span><br></pre></td></tr></table></figure><p>定时触发</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">schedule:</span></span><br><span class="line">   <span class="bullet">-</span> <span class="attr">cron:</span> <span class="number">0</span> <span class="string">*/6</span> <span class="string">*</span> <span class="string">*</span> <span class="string">*</span></span><br></pre></td></tr></table></figure><p>发布 re­lease 触发</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">release:</span></span><br><span class="line">    <span class="attr">types:</span> [<span class="string">published</span>]</span><br></pre></td></tr></table></figure><p>仓库被 star 时触发</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">watch:</span></span><br><span class="line">     <span class="attr">types:</span> [<span class="string">started</span>]</span><br></pre></td></tr></table></figure><p><strong>jobs</strong></p><p><code>jobs</code> 表示要执行的一项或多项任务。每一项任务必须关联一个 ID (job_id)，比如示例中的 <code>my_first_job</code> 和 my_second_job。job_id 里面的 name 字段是任务的名称。<code>job_id</code> 不能有空格，只能使用数字、英文字母和 <code>-</code> 或<code>_</code>符号，而 <code>name</code> 可以随意，若忽略 <code>name</code> 字段，则默认会设置为 <code>job_id</code>。</p><p>当有多个任务时，可以指定任务的依赖关系，即运行顺序，否则是同时运行。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jobs:</span></span><br><span class="line">   <span class="attr">job1:</span></span><br><span class="line">   <span class="attr">job2:</span></span><br><span class="line">     <span class="attr">needs:</span> <span class="string">job1</span></span><br><span class="line">   <span class="attr">job3:</span></span><br><span class="line">     <span class="attr">needs:</span> [<span class="string">job1</span>, <span class="string">job2</span>]</span><br></pre></td></tr></table></figure><p>上面代码中，<code>job1</code> 必须先于 <code>job2</code> 完成，而 <code>job3</code> 等待 <code>job1</code> 和 <code>job2</code> 的完成才能运行。因此，这个 work­flow 的运行顺序依次为：<code>job1</code>、<code>job2</code>、<code>job3</code>。</p><p><strong>runs-on</strong></p><p><code>runs-on</code> 字段指定任务运行所需要的虚拟服务器环境，是必填字段，每个任务的虚拟环境都是独立的。目前可用的虚拟机如下：</p><table><thead><tr><th align="center">虚拟环境</th><th align="center">YAML workflow 标签</th></tr></thead><tbody><tr><td align="center">Windows Server 2019</td><td align="center">windows-latest</td></tr><tr><td align="center">Ubuntu 18.04</td><td align="center">ubuntu-latest or ubuntu-18.04</td></tr><tr><td align="center">Ubuntu 16.04</td><td align="center">ubuntu-16.04</td></tr><tr><td align="center">macOS X Catalina 10.15</td><td align="center">macos-latest</td></tr></tbody></table><p><strong>steps</strong></p><p><code>steps</code> 字段指定每个任务的运行步骤，可以包含一个或多个步骤。步骤开头使用 <code>-</code> 符号。每个步骤可以指定以下字段:</p><ul><li><p><code>name</code>：步骤名称。</p></li><li><p><code>uses</code>：该步骤引用的action或 Docker 镜像。</p></li><li><p><code>run</code>：该步骤运行的 bash 命令。</p></li><li><p><code>env</code>：该步骤所需的环境变量。</p></li></ul><p>其中 <code>uses</code> 和 <code>run</code> 是必填字段，每个步骤只能有其一。同样名称也是可以忽略的。</p><p><strong>action</strong></p><p><code>action</code> 是 GitHub Ac­tions 中的重要组成部分，这点从名称中就可以看出，<code>actions</code> 是 <code>action</code> 的复数形式。它是已经编写好的步骤脚本，存放在 GitHub 仓库中。</p><p>对于初学者来说可以直接引用其它开发者已经写好的 <code>action</code>，可以在官方 <a href="https://github.com/actions">action仓库</a>或者 <a href="https://github.com/marketplace?type=actions">GitHub Marketplace</a>去获取。此外<a href="https://github.com/sdras/awesome-actions">Awesome Actions</a>这个项目收集了很多非常不错的 <code>action</code>。</p><p>既然 <code>action</code> 是代码仓库，当然就有版本的概念。引用某个具体版本的 <code>action</code>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">steps:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/setup-node@74bc508</span> <span class="comment"># 指定一个 commit</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/setup-node@v1.2</span> <span class="comment"># 指定一个 tag</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/setup-node@master</span> <span class="comment"># 指定一个分支</span></span><br></pre></td></tr></table></figure><p>一般来说 action 的开发者会说明建议使用的版本。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># .github/workflow/文件名.yml</span></span><br><span class="line"><span class="comment"># 这是基础模板</span></span><br><span class="line"><span class="comment"># 这个 workflow 的名字，可以随意命名</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">Node.js</span> <span class="string">CI</span></span><br><span class="line"><span class="comment"># on触发条件</span></span><br><span class="line"><span class="attr">on:</span> [<span class="string">push</span>]</span><br><span class="line"><span class="comment"># 1.push事件触发workflow</span></span><br><span class="line"><span class="comment"># 2.如果多个事件（on: [push,pull]）</span></span><br><span class="line"><span class="comment"># 3.指定触发事件，可以限定分支、tag、指定文件路径（on.&lt;push|pull_request&gt;.&lt;tags|branches|paths&gt;）</span></span><br><span class="line"><span class="comment">#  在master分支push时触发</span></span><br><span class="line"><span class="comment">#   push：</span></span><br><span class="line"><span class="comment">#     branches:</span></span><br><span class="line"><span class="comment">#       - master</span></span><br><span class="line"><span class="comment">#     tags:</span></span><br><span class="line"><span class="comment">#       - v1.0.0 # 指定tags版本更新</span></span><br><span class="line"><span class="comment">#       - v1.*.*  #指tags版本为1.n.n都会更新</span></span><br><span class="line"><span class="comment">#    paths:</span></span><br><span class="line"><span class="comment">#       - &#x27;**.js&#x27; # 所有的js文件更新时提交触发</span></span><br><span class="line"><span class="comment">#       - &#x27;doc/**&#x27;  # doc下文件发生改动触发</span></span><br><span class="line"><span class="comment"># 4.忽略分支、tag、某一文件    branches-ignore、tags-ignore  、paths-ignore</span></span><br><span class="line"><span class="comment">#    branches-ignore:</span></span><br><span class="line"><span class="comment">#      - dev #当提交时分支为dev 不触发</span></span><br><span class="line"><span class="comment">#    tags-ignore:</span></span><br><span class="line"><span class="comment">#      - v2   #tag为v2时不触发</span></span><br><span class="line"><span class="comment"># 5. 计划的工作流在默认或基本分支上的最新提交上运行。可以运行计划的工作流程的最短间隔是每5分钟一次</span></span><br><span class="line"><span class="comment">#   schedule:</span></span><br><span class="line"><span class="comment">#      - cron:  &#x27;*/5 * * * *&#x27;</span></span><br><span class="line"><span class="comment">#   #  * * * * * (minute (0 - 59)、hour (0 - 23)、day of the month (1 - 31)、month (1 - 12 or JAN-DEC)、day of the week (0 - 6 or SUN-SAT))</span></span><br><span class="line"><span class="comment">#  # *   任何值               * * * * * 每天每一分钟运行。</span></span><br><span class="line"><span class="comment">#  # ， 值列表分隔符      2,10 4,5 * * * 在每天的第4和5小时的第2分钟和第10分钟运行。</span></span><br><span class="line"><span class="comment">#  # --  取值范围              0 4-6 * * * 在第4、5和6小时的第0分钟运行。</span></span><br><span class="line"><span class="comment">#  # /   步长值               20/15 * * * * 从20分钟到59（每20、35和50分钟）开始，每15分钟运行一次。</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="comment"># 所有的 job 都是并行的，但往往会有依赖关系</span></span><br><span class="line">  <span class="comment"># test:</span></span><br><span class="line">  <span class="comment"># link:</span></span><br><span class="line">  <span class="comment">#   needs: test link依赖test</span></span><br><span class="line">  <span class="comment"># 一个名为 build 的 job</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="comment"># runs-on指定运行所需要的虚拟机环境，必填</span></span><br><span class="line">    <span class="comment"># ubuntu-latest指定Ubuntu GitHub托管的运行程序的最新版本。</span></span><br><span class="line">    <span class="comment"># 也可以自己定义托管环境[self-hosted, linux, ARM32]</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">strategy:</span> <span class="comment">#strategy 定义一些矩阵供 job 使用</span></span><br><span class="line">      <span class="attr">matrix:</span></span><br><span class="line">        <span class="attr">node-version:</span> [<span class="number">8.</span><span class="string">x</span>, <span class="number">10.</span><span class="string">x</span>, <span class="number">12.</span><span class="string">x</span>]</span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">    <span class="comment"># 获取源码</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@master</span> <span class="comment"># 获取master代码</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">persist-credentials:</span> <span class="literal">false</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">and</span> <span class="string">Build</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span> <span class="comment">#执行多个命令</span></span><br><span class="line">          <span class="string">npm</span> <span class="string">install</span></span><br><span class="line">          <span class="string">npm</span> <span class="string">run</span> <span class="string">build</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">JamesIves/github-pages-deploy-action@releases/v3</span> <span class="comment"># 写好的action</span></span><br><span class="line">        <span class="attr">with:</span>  <span class="comment">#with为uses 的 action 传入参数，具体看你使用的 action 的说明</span></span><br><span class="line">          <span class="attr">ACCESS_TOKEN:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.DEPLOY_KEY</span> <span class="string">&#125;&#125;</span> <span class="comment">#自定义生成key 生成步骤在下面</span></span><br><span class="line">          <span class="attr">BRANCH:</span> <span class="string">gh-pages</span> <span class="comment">#操作应部署到的分支。</span></span><br><span class="line">          <span class="attr">FOLDER:</span> <span class="string">dist</span> <span class="comment">#操作应部署的文件夹。</span></span><br></pre></td></tr></table></figure><h2 id="自动同步Fork仓库"><a href="#自动同步Fork仓库" class="headerlink" title="自动同步Fork仓库"></a>自动同步Fork仓库</h2><p>GitHub仓库上fork别人的项目，同步更新的时候就比较麻烦，要么是通过网页操作，要么克隆仓库后通过命令行操作等。利用GitHub Actions自动同步Fork仓库是个不错的选择。其中需要在项目Settings内Secrets添加<code>GH_PERSONAL_ACCESS_TOKEN</code>。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="string">-master</span></span><br><span class="line">  <span class="attr">schedule:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">cron:</span> <span class="number">0</span> <span class="string">*/12</span> <span class="string">*</span> <span class="string">*</span> <span class="string">*</span>   <span class="comment"># 每隔12小时</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">update_external_airflow_fork:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">TobKed/github-forks-sync-action@master</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">github_token:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GH_PERSONAL_ACCESS_TOKEN</span> <span class="string">&#125;&#125;</span> <span class="comment"># 令牌</span></span><br><span class="line">          <span class="attr">upstream_repository:</span> <span class="string">luolongfei/freenom</span> <span class="comment"># 上游仓库</span></span><br><span class="line">          <span class="attr">target_repository:</span> <span class="string">leicancun/freenom</span> <span class="comment"># 你要推送的仓库</span></span><br><span class="line">          <span class="attr">upstream_branch:</span> <span class="string">master</span> <span class="comment"># 默认是拉取上游仓库的master分支</span></span><br><span class="line">          <span class="attr">target_branch:</span> <span class="string">master</span> <span class="comment"># 默认推送到你的仓库master分支</span></span><br><span class="line">          <span class="attr">force:</span> <span class="literal">true</span> <span class="comment"># 是否强制推送</span></span><br><span class="line">          <span class="attr">tags:</span> <span class="literal">true</span> <span class="comment"># 确定是否使用-tags</span></span><br></pre></td></tr></table></figure><p>定时自动同步任务，亦可将Github的仓库镜像备份到Gitee，只需将<code>GH_TOKEN</code>改为Gitee生成的<code>TOKEN</code>。若报错<code>Unshallow On Failed</code>，删除<code>run: git -C repo.git push --all downstream &amp;&amp; git -C repo.git push --tags downstream</code>这步，修改<code>DEPTH</code>值。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">test</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line">    <span class="comment"># 忽略README.md</span></span><br><span class="line">    <span class="attr">paths-ignore:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;README.md&#x27;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;LICENSE&#x27;</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">sync:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">Sync</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Clone</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">git</span> <span class="string">clone</span> <span class="string">--mirror</span> <span class="string">--no-single-branch</span> <span class="string">--depth=$DEPTH</span> <span class="string">$SRC_REPO</span> <span class="string">repo.git</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">SRC_REPO:</span> <span class="string">https://github.com/用户名/仓库名.git</span></span><br><span class="line">          <span class="attr">DEPTH:</span> <span class="number">10</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Config</span> <span class="string">DownStream</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">git</span> <span class="string">-C</span> <span class="string">repo.git</span> <span class="string">remote</span> <span class="string">add</span> <span class="string">downstream</span> <span class="string">&quot;$PUSH_TARGET&quot;</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">PUSH_TARGET:</span> <span class="string">https://用户名:$&#123;&#123;</span> <span class="string">secrets.GH_TOKEN</span> <span class="string">&#125;&#125;@github.com/用户名/仓库名</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Push</span> <span class="string">DownStream</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">git</span> <span class="string">-C</span> <span class="string">repo.git</span> <span class="string">push</span> <span class="string">--all</span> <span class="string">downstream</span> <span class="string">&amp;&amp;</span> <span class="string">git</span> <span class="string">-C</span> <span class="string">repo.git</span> <span class="string">push</span> <span class="string">--tags</span> <span class="string">downstream</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Try</span> <span class="string">Unshallow</span> <span class="string">On</span> <span class="string">Failed</span></span><br><span class="line">        <span class="attr">if:</span> <span class="string">failure()</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">          <span class="string">git</span> <span class="string">-C</span> <span class="string">repo.git</span> <span class="string">fetch</span> <span class="string">--unshallow</span> <span class="string">origin</span> <span class="string">||</span> <span class="string">exit</span> <span class="number">1</span></span><br><span class="line">          <span class="string">git</span> <span class="string">-C</span> <span class="string">repo.git</span> <span class="string">gc</span></span><br><span class="line">          <span class="string">git</span> <span class="string">-C</span> <span class="string">repo.git</span> <span class="string">count-objects</span> <span class="string">-vH</span></span><br><span class="line">          <span class="string">git</span> <span class="string">-C</span> <span class="string">repo.git</span> <span class="string">push</span> <span class="string">--all</span> <span class="string">downstream</span> <span class="string">&amp;&amp;</span> <span class="string">git</span> <span class="string">-C</span> <span class="string">repo.git</span> <span class="string">push</span> <span class="string">--tags</span> <span class="string">downstream</span></span><br></pre></td></tr></table></figure><p>Github上也有相关同步仓库的Actions项目，如<code>https://github.com/repo-sync/github-sync</code>、<code>https://github.com/wei/git-sync</code>等。</p><h2 id="自动同步仓库Release"><a href="#自动同步仓库Release" class="headerlink" title="自动同步仓库Release"></a>自动同步仓库Release</h2><p><code>secrets.GITHUB_TOKEN</code>可不用填写，保持默认。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">release</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">schedule:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">cron:</span> <span class="string">&quot;35 14 * * *&quot;</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">Build</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">out</span> <span class="string">project</span> <span class="string">files</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">fetch-depth:</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Check</span> <span class="string">and</span> <span class="string">release</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">          <span class="string">CORE_TAG_URL=&quot;https://api.github.com/repos/用户名/仓库名/releases/latest&quot;</span></span><br><span class="line">          <span class="string">CORE_LATEST_VER=`curl</span> <span class="string">-H</span> <span class="string">&quot;Accept: application/vnd.github.v3+json&quot;</span> <span class="string">-H</span> <span class="string">&quot;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36&quot;</span> <span class="string">-s</span> <span class="string">$&#123;CORE_TAG_URL&#125;</span> <span class="string">--connect-timeout</span> <span class="number">5</span> <span class="string">|</span> <span class="string">grep</span> <span class="string">&#x27;tag_name&#x27;</span> <span class="string">|</span> <span class="string">cut</span> <span class="string">-d\&quot;</span> <span class="string">-f4`</span></span><br><span class="line">          <span class="string">if</span> [[ <span class="string">$</span>&#123;<span class="string">CORE_LATEST_VER</span>&#125; <span class="type">!=</span> <span class="string">v*</span> ]]<span class="string">;</span> <span class="string">then</span></span><br><span class="line">            <span class="string">CORE_LATEST_VER=v$&#123;CORE_LATEST_VER&#125;</span></span><br><span class="line">          <span class="string">fi</span></span><br><span class="line">          <span class="string">DIST_TAGS_URL=&quot;https://api.github.com/repos/$&#123;&#123;</span> <span class="string">github.repository</span> <span class="string">&#125;&#125;/tags&quot;</span></span><br><span class="line">          <span class="string">DIST_TAG_FOUND=`curl</span> <span class="string">-H</span> <span class="string">&quot;Accept: application/vnd.github.v3+json&quot;</span> <span class="string">-H</span> <span class="string">&quot;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36&quot;</span> <span class="string">-s</span> <span class="string">$&#123;DIST_TAGS_URL&#125;</span> <span class="string">--connect-timeout</span> <span class="number">5</span> <span class="string">|</span> <span class="string">grep</span> <span class="string">&quot;\&quot;name\&quot;\: \&quot;$&#123;CORE_LATEST_VER&#125;\&quot;&quot;</span><span class="string">`</span> <span class="string">||</span> <span class="literal">true</span></span><br><span class="line">          <span class="string">if</span> [ <span class="string">-z</span> <span class="string">$</span>&#123;<span class="string">DIST_TAG_FOUND</span>&#125; ]<span class="string">;</span> <span class="string">then</span></span><br><span class="line">            <span class="string">rm</span> <span class="string">-rf</span> <span class="string">*</span></span><br><span class="line">            <span class="string">for</span> <span class="string">file</span> <span class="string">in</span> <span class="string">$(curl</span> <span class="string">-H</span> <span class="string">&quot;Accept: application/vnd.github.v3+json&quot;</span> <span class="string">-H</span> <span class="string">&quot;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36&quot;</span> <span class="string">-sSL</span> <span class="string">$CORE_TAG_URL</span> <span class="string">|</span> <span class="string">grep</span> <span class="string">&#x27;browser_download_url&#x27;</span> <span class="string">|</span> <span class="string">cut</span> <span class="string">-d\&quot;</span> <span class="string">-f4);</span> <span class="string">do</span></span><br><span class="line">              <span class="string">wget</span> <span class="string">$file</span></span><br><span class="line">            <span class="string">done</span></span><br><span class="line">            <span class="string">git</span> <span class="string">add</span> <span class="string">.</span></span><br><span class="line">            <span class="string">git</span> <span class="string">config</span> <span class="string">user.name</span> <span class="string">&quot;用户名&quot;</span></span><br><span class="line">            <span class="string">git</span> <span class="string">config</span> <span class="string">user.email</span> <span class="string">&quot;邮箱&quot;</span></span><br><span class="line">            <span class="string">git</span> <span class="string">commit</span> <span class="string">-m</span> <span class="string">&quot;Version $&#123;CORE_LATEST_VER&#125;&quot;</span></span><br><span class="line">            <span class="string">git</span> <span class="string">tag</span> <span class="string">-a</span> <span class="string">&quot;$&#123;CORE_LATEST_VER&#125;&quot;</span> <span class="string">-m</span> <span class="string">&quot;Version $&#123;CORE_LATEST_VER&#125;&quot;</span></span><br><span class="line">            <span class="string">git</span> <span class="string">remote</span> <span class="string">add</span> <span class="string">release</span> <span class="string">&quot;https://$<span class="template-variable">&#123;&#123; github.actor &#125;&#125;</span>:$<span class="template-variable">&#123;&#123; secrets.GITHUB_TOKEN &#125;&#125;</span>@github.com/$<span class="template-variable">&#123;&#123; github.repository &#125;&#125;</span>&quot;</span></span><br><span class="line">            <span class="string">git</span> <span class="string">push</span> <span class="string">-u</span> <span class="string">--follow-tags</span> <span class="string">release</span> <span class="string">master</span></span><br><span class="line">          <span class="string">fi</span></span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><p><a href="https://docs.github.com/cn/actions">Automating your workflow with GitHub Actions</a></p></li><li><p><a href="https://p3terx.com/archives/github-actions-started-tutorial.html">GitHub Actions 入门教程</a></p></li><li><p><a href="http://www.ruanyifeng.com/blog/2019/09/getting-started-with-github-actions.html">GitHub Actions 入门教程 - 阮一峰的网络日志</a></p></li><li><p><a href="https://www.qwqmiao.xyz/post/74d2ee75/">使用GitHub Actions自动同步Fork仓库</a></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="开发环境" scheme="https://booku.ltd/categories/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
    
    
    <category term="教程" scheme="https://booku.ltd/tags/%E6%95%99%E7%A8%8B/"/>
    
    <category term="Github" scheme="https://booku.ltd/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>OpenWrt磁盘挂载及网络文件共享</title>
    <link href="https://booku.ltd/posts/op-netsharing/"/>
    <id>https://booku.ltd/posts/op-netsharing/</id>
    <published>2020-08-04T08:56:30.000Z</published>
    <updated>2021-05-09T15:56:24.155Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>&emsp;&emsp;在使用硬盘或U盘安装Openwrt系统时，磁盘会被分为几个分区，其中系统分区只占用很小的部分，一般也就也就几百兆，剩下是未分区的部分。16G的U盘(实际空间14.8G)，安装openwrt系统后，剩余14.2G空间。可以把剩余空间挂载起来，实现网络文件共享。</p><h2 id="格式化分区"><a href="#格式化分区" class="headerlink" title="格式化分区"></a>格式化分区</h2><p> &emsp;&emsp;通过SSH工具连接，输入分区（命令）<code>fdisk /dev/sda</code>，可以查看系统磁盘分区。输入<code>p</code>（命令）查看磁盘的容量、型号、扇区、格式，和已存在的分区。<br><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/kylenchen/CDN@latest/post/op-netsharing/1.png"></p><p>&emsp;&emsp;可以看出，磁盘共有14.86G，其中有两个分区，如果把剩余的空间进行分区，即新建分区，需要输入小写n。提示设置分区编号，看到已有分区，可默认按回车。提示输入起始扇区，这里需要注意下，一般情况下默认即可。但是本次操作时默认起始扇区(2048-31116287)有误，直接默认输入后，修改保存，提示“Partition table entries are not in disk order”，经过<code>Command (m for help): x</code>和<code>Expert command (m for help): f</code>修复后，原先的<code>/dev/sda3</code>变成了<code>/dev/sda1</code>，其他两个分区的盘符也随之改变，之后无法进行格式化操作。<br><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/kylenchen/CDN@latest/post/op-netsharing/2.png"></p><p>&emsp;&emsp;错误原因：新建分区时，起始扇区输入有误，起始扇区2048-31116287，已经包含了原先的<code>/dev/sda1</code>和<code>/dev/sda2</code>的扇区，且2048其实扇区在最前，修复盘符顺序后，故<code>/dev/sda3</code>变成<code>/dev/sda1</code>。解决方法：<code>Command (m for help): d</code> 删除新建分区，重新新建分区。根据原先的盘符错误新建分区编号应该选<code>1</code>，即<code>/dev/sda1</code>，默认起始扇区输入1318912，扇区在Id为83分区之后1318912。提示输入结束扇区默认，查看新建分区 是否成功<code>Command (m for help): p</code>。因为之前的分区盘符有误，再通过<code>Command (m for help): x</code>和<code>Expert command (m for help): f</code>修复fix partition order。<code>Command (m for help): w</code>保存退出分区。</p><p>&emsp;&emsp;格式化分区<code>mkfs.ext4 /dev/sda3</code>。<br><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/kylenchen/CDN@latest/post/op-netsharing/3.png"></p><h2 id="挂载分区"><a href="#挂载分区" class="headerlink" title="挂载分区"></a>挂载分区</h2><p>&emsp;&emsp;登录系统：系统 - 挂载点 - 添加。UUID根据需要选择新建的<code>/dev/sda3</code>分区，”挂载点“选择自定义为<code>/mnt/sda3</code>,勾选启用挂载点，保存应用。<br><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/kylenchen/CDN@latest/post/op-netsharing/4.png"></p><p>&emsp;&emsp;主页页面中，选择“服务”–“网络共享”。在共享页面的“常规设置”里，查看工作组，需要和内网其他需访问共享的设备在同一个工作组，默认是“WORKGROUP”。勾选”共享家目录“和”启用 macOS 兼容共享“。</p><p>&emsp;&emsp;设置共享目录。“共享名”是你其他设备上会看到的共享的名字，可以随自己喜好填；“目录”是你要共享的硬盘分区或者目录，根据自己挂载的磁盘填写，这里为<code>/mnt/sda3</code>；“允许用户”是你允许访问共享的用户，为了安全起见，建议不要用匿名，万一被别人蹭网。然后给目录权限，<code>0777</code>。<br><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/kylenchen/CDN@latest/post/op-netsharing/5.png"></p><p>&emsp;&emsp;点击“编辑模板”，查看在“<code>invalid users = root</code>”前是否有一个<code>#</code>号，没有需添加<code>#</code>号，即将本行注释掉，这样系统<code>root</code>用户就不会被限制访问<code>samba</code>了。</p><p>&emsp;&emsp;为访问共享文件的安全性，可为<code>samba</code>设置访问密码。<code>SSH</code>连接系统，输入下面代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">smbpasswd -a root</span><br></pre></td></tr></table></figure><p>然后会要求你输入密码，然后重复密码，这个密码就是你的<code>samba</code>访问的密码，输入完了就算完成了。输入<code>reboot</code>重启。可登入系统后台，执行重启。**<code>一定重启一下路由！</code>** 保证正确挂载才可以。</p><h2 id="Windows电脑开启网络共享"><a href="#Windows电脑开启网络共享" class="headerlink" title="Windows电脑开启网络共享"></a>Windows电脑开启网络共享</h2><p>&emsp;&emsp;打开控制面板，选择”程序“，点击”启用或关闭Windows功能“，勾选”SMB 1.0/CIFS File Sharing Support“和”SMB Direct”，确定且等待加载完成，稍后重启计算机。<br><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/kylenchen/CDN@latest/post/op-netsharing/6.png"></p><p>&emsp;&emsp;<code>Win+R</code>打开“运行”，输入<code>gpedit.msc</code>，“确定”以打开“本地组策略编辑器”，或者左下角搜索框搜索”编辑组策略“打开。</p><p>按 计算机配置→管理模板→网络 的顺序，依次展开左侧目录树。点击“Lanman工作站”，右侧会显示该项目的详细设置。点击里面的“启用不安全的来宾登录”，将它由“未配置”改为“已启用”。<br><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/kylenchen/CDN@latest/post/op-netsharing/7.png"></p><p>&emsp;&emsp;控制面板→网络和共享中心→高级共享设置，选择”启动网络发现“和”启用文件和打印机共享“。注意开启后，你的计算机会被其他局域网里的设备搜索到。**<code>完成后重启计算机！</code>**<br><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/kylenchen/CDN@latest/post/op-netsharing/8.png"></p><p>&emsp;&emsp;然后打开电脑上的网络，就可以发现局域网共享文件，打开目录，要求输入访问用户和密码，输入<code>root</code>，密码就是<code>samba</code>设置的密码，即可访问网络共享了。<br><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/kylenchen/CDN@latest/post/op-netsharing/9.png"></p><p>&emsp;&emsp;手机端可以下载VLC、ES文件浏览器和Kodi等客户端访问本地局域网网络共享文件。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="路由" scheme="https://booku.ltd/categories/%E8%B7%AF%E7%94%B1/"/>
    
    
    <category term="OpenWrt" scheme="https://booku.ltd/tags/OpenWrt/"/>
    
    <category term="网络共享" scheme="https://booku.ltd/tags/%E7%BD%91%E7%BB%9C%E5%85%B1%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>WordPress更换服务器数据迁移</title>
    <link href="https://booku.ltd/posts/wordpressmg/"/>
    <id>https://booku.ltd/posts/wordpressmg/</id>
    <published>2020-07-20T14:31:56.000Z</published>
    <updated>2021-05-09T15:56:24.155Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>WordPress数据迁移分两种情况，更换域名和不更换域名。搬家过程相同，更换域名的话需要多一步域名替换的操作。</p><p>注意：搬家前一定要备份网站文件和数据库，搬家过程中如果出现问题也好恢复！</p><p>下面分为两种方法进行介绍：插件法和手动法，插件法更简单，手动法更通用；更换域名的方法单独写在最后，可以独立使用。</p><h2 id="使用插件迁移网站"><a href="#使用插件迁移网站" class="headerlink" title="使用插件迁移网站"></a>使用插件迁移网站</h2><p>推荐使用<code>All-in-One WP Migration</code>插件，直接打包全站数据一键迁移，非常方便。</p><ul><li><p>导出数据<br>登陆WordPress后台，搜索并安装插件<code>All-in-One WP Migration</code>。<br><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/kylenchen/CDN@latest/post/wordpressmg/1.png"><br>等待文件打包完成，下载到本地。得到一个后缀名为<code>.wpress</code>的文件。<br><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/kylenchen/CDN@latest/post/wordpressmg/2.png"></p></li><li><p>导入网站文件<br>将域名解析到新主机空间。在新主机空间上安装好WordPress，进入后台安装<code>All-in-One WP Migration</code>。<br>然后进入这里下载Basic版本辅助插件<code>all-in-one-wp-migration.zip</code>，手动上传安装该插件，Basic版本文件上传大小限制需小于512M。<br>导入刚刚下载到本地的网站文件进行恢复。如果导入到<code>100%</code>就卡着不动了，可以试着修改<code>PHP</code>文件上传大小。<br><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/kylenchen/CDN@latest/post/wordpressmg/3.png"><br>提示，是否要覆盖原网站数据，我们点击<code>CONTIOUE</code>继续。<br><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/kylenchen/CDN@latest/post/wordpressmg/4.png"><br>文件导入成功，修改一下固定连接，网站就搬家成功了。<br><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/kylenchen/CDN@latest/post/wordpressmg/5.png"></p></li></ul><p><strong>导入成功后，后台管理员帐号密码与前网站一样，之后可根据需要修改</strong>。</p><h2 id="手动数据库备份"><a href="#手动数据库备份" class="headerlink" title="手动数据库备份"></a>手动数据库备份</h2><ul><li><p>备份网站文件和数据库<br>进入原网站服务器/主机后台，打包下载网站根目录下的所有文件到本地。<br>进入<code>phpMyAdmin</code>，选择网站数据库，导出<code>sql</code>文件到本地。</p></li><li><p>上传网站文件和导入数据库<br>上传网站文件到新主机的网站目录并解压。<br>在<code>phpMyAdmin</code>中创建一个新数据库，并导入上面的网站数据库<code>sql</code>文件。</p></li><li><p>修改 wp-config.php<br>编辑<code>wp-config.php</code>文件，修改数据库名称、用户名、密码，连接新主机。</p></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 数据库名称 */</span></span><br><span class="line">define(<span class="string">&#x27;DB_NAME&#x27;</span>, <span class="string">&#x27;名称&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 数据库用户名 */</span></span><br><span class="line">define(<span class="string">&#x27;DB_USER&#x27;</span>, <span class="string">&#x27;用户名&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 数据库密码 */</span></span><br><span class="line">define(<span class="string">&#x27;DB_PASSWORD&#x27;</span>, <span class="string">&#x27;密码&#x27;</span>);</span><br></pre></td></tr></table></figure><p>将域名解析到新主机空间，进入WordPress后台更新固定连接，完成。</p><h2 id="WordPress-更换域名的方法"><a href="#WordPress-更换域名的方法" class="headerlink" title="WordPress 更换域名的方法"></a>WordPress 更换域名的方法</h2><p>进入<code>phpMyAdmin</code>，选择网站数据库 -&gt; <code>SQL</code> -&gt; 粘贴下面代码 -&gt; 执行。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> wp_options <span class="keyword">SET</span> option_value = <span class="keyword">REPLACE</span>(option_value, <span class="string">&#x27;旧域名&#x27;</span>, <span class="string">&#x27;新域名&#x27;</span>) <span class="keyword">WHERE</span> option_name = <span class="string">&#x27;home&#x27;</span> <span class="keyword">OR</span> option_name = <span class="string">&#x27;siteurl&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">UPDATE</span> wp_posts <span class="keyword">SET</span> post_content = <span class="keyword">REPLACE</span>(post_content, <span class="string">&#x27;旧域名&#x27;</span> , <span class="string">&#x27;新域名&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">UPDATE</span> wp_posts <span class="keyword">SET</span> guid = <span class="keyword">REPLACE</span>(guid, <span class="string">&#x27;旧域名&#x27;</span> ,<span class="string">&#x27;新域名&#x27;</span>);</span><br></pre></td></tr></table></figure><p><strong>更简单的方法可以使用IDE编辑器，批量查找替换所有的域名</strong>。</p><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>重装Wordpress后发现站点打开文章后，可能出现404。出现原因是网站更新乐固定自定义链接，服务器未配置伪静态。Nginx服务器解决方法</p><p>首先打开Nginx的配置文件<code>nginx.conf</code>，找到<code>server&#123; &#125;</code>这个大括号，在里面添加代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">location &#x2F; &#123;</span><br><span class="line">      index index.php index.html index.htm;</span><br><span class="line">      if (-f $request_filename&#x2F;index.html)&#123;</span><br><span class="line">         rewrite (.*) $1&#x2F;index.html break;</span><br><span class="line">      &#125;</span><br><span class="line">      if (-f $request_filename&#x2F;index.php)&#123;</span><br><span class="line">        rewrite (.*) $1&#x2F;index.php;</span><br><span class="line">      &#125;</span><br><span class="line">      if (!-f $request_filename)&#123;</span><br><span class="line">        rewrite (.*) &#x2F;index.php;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line">rewrite &#x2F;wp-admin$ $scheme:&#x2F;&#x2F;$host$uri&#x2F; permanent;</span><br></pre></td></tr></table></figure><p>如果使用的宝塔面板安装的，可以使用自带的网站静态规则。<br><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/kylenchen/CDN@latest/post/wordpressmg/6.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="软件" scheme="https://booku.ltd/categories/%E8%BD%AF%E4%BB%B6/"/>
    
    
    <category term="教程" scheme="https://booku.ltd/tags/%E6%95%99%E7%A8%8B/"/>
    
    <category term="WordPress" scheme="https://booku.ltd/tags/WordPress/"/>
    
  </entry>
  
  <entry>
    <title>轻量级代码高亮插件使用</title>
    <link href="https://booku.ltd/posts/code-highlight/"/>
    <id>https://booku.ltd/posts/code-highlight/</id>
    <published>2020-07-18T11:32:55.000Z</published>
    <updated>2021-05-09T15:56:24.155Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>本文主要介绍两款轻量级的插件highlight.js和prism.js。</p></blockquote><h2 id="highlightjs"><a href="#highlightjs" class="headerlink" title="highlightjs"></a>highlightjs</h2><h3 id="基本特点"><a href="#基本特点" class="headerlink" title="基本特点"></a>基本特点</h3><p><code>highlight.js</code>是一个用于在任何web页面上着色显示各种示例源代码语法的JS项目。具有以下特色：</p><ul><li>支持 189种语言，98种代码格式化风格。</li><li>自动检测语言种类</li><li>支持多语言混合的代码高亮</li><li>支持<code>Node.js</code></li><li>支持使用任何HTML标记</li><li>兼容任意<code>js</code>框架</li></ul><p>目前最高版本是2020年06月16日发行的。点击 <code>Get version 10.1.1</code>进入，可进行下载。<code>Usage</code>链接的是说明文档。</p><h3 id="下载使用"><a href="#下载使用" class="headerlink" title="下载使用"></a>下载使用</h3><p><code>highlight.js</code>可通过CDN 引入包和手动下载等方式导入。官网下载地址：<a href="https://highlightjs.org/download/">https://highlightjs.org/download/</a></p><p><code>highlight.js</code>的使用比较简单，这里通过官网提供的CDN链接讲解使用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel=<span class="string">&quot;stylesheet&quot;</span> href=<span class="string">&quot;//cdn.jsdelivr.net/gh/highlightjs/cdn-release@10.0.0/build/styles/default.min.css&quot;</span>&gt;</span><br><span class="line">&lt;script src=<span class="string">&quot;//cdn.jsdelivr.net/gh/highlightjs/cdn-release@10.0.0/build/highlight.min.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>安装的思路非常简单：</p><ul><li>导入 CSS 文件</li><li>导入 JS 文件</li><li>加载 JS</li></ul><p>导入<code>highlight.js</code>，最简单的方法是在<code>header.php</code>加入下面代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel=<span class="string">&quot;stylesheet&quot;</span> href=<span class="string">&quot;//cdn.jsdelivr.net/gh/highlightjs/cdn-release@10.0.0/build/styles/default.min.css&quot;</span>&gt;</span><br><span class="line">&lt;script src=<span class="string">&quot;//cdn.jsdelivr.net/gh/highlightjs/cdn-release@10.0.0/build/highlight.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;hljs.initHighlightingOnLoad();&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>为了导入代码的规范化，推荐将JS 放在<code>&lt;body&gt;</code>中而非<code>&lt;head&gt;</code>中，所以改进后的办法是将</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;hljs.initHighlightingOnLoad();&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>移至<code>footer.php</code>中<code>&lt;/body&gt;</code>标签之前。</p><p>为实现代码高亮则应将代码放在标签<code>&lt;pre&gt;&lt;code class=&quot;json&quot;&gt;...&lt;/code&gt;&lt;/pre&gt;</code>，采用文本编辑的方式。<code>class</code>用来指定放入代码的数据类型，不写的话，程序可自动检测。防止出错，最好写上。</p><p>若采用可视化编辑方式，将直接写入的代码预格式化，可采用下面方式调用方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">   $(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   $(<span class="string">&#x27;pre&#x27;</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params">i, e</span>) </span>&#123;hljs.highlightBlock(e)&#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="prismjs"><a href="#prismjs" class="headerlink" title="prismjs"></a>prismjs</h2><h3 id="基本特点-1"><a href="#基本特点-1" class="headerlink" title="基本特点"></a>基本特点</h3><p><code>Prism</code>是一个轻量级，可扩展的语法着色工具，符合<code>Web</code>标准。每种语言定义约增加<code>300-500</code>自己大小。非常易于使用，只需要插入一个<code>CSS</code>和<code>JS</code>文件即可。支持多种着色主题。</p><ul><li>极致易用：引用<code>prism.css</code>和<code>prism.js</code>，使用合适的<code>HTML5</code>标签<code>（code.language-xxxx</code>），搞定！</li><li>天生伶俐：语言的<code>CSS</code>类是可继承的，所以你只需定义一次就能应用到多个代码片段。</li><li>轻如鸿毛：代码压缩后只有<code>1.6KB</code>。每添加一个语言平均增加<code>0.3-0.5KB</code>，主题在<code>1KB</code>左右。</li><li>快如闪电：如果可能，支持通过<code>Web Workers</code>实现并行。</li><li>轻松扩展：定义新语言或扩展现有语法，或者新增功能都非常简单。</li><li>丰富样式：所有的样式通过<code>CSS</code>完成，并使用合理的类名如：<code>.comment</code>, <code>.string</code>, <code>.property</code>等</li></ul><h3 id="下载使用-1"><a href="#下载使用-1" class="headerlink" title="下载使用"></a>下载使用</h3><p>官网下载地址：<a href="http://prismjs.com/download.html">http://prismjs.com/download.html</a> 。选择主题样式和支持的语言，根据需要可选<code>Plugins</code>，如<code>Line Numbers</code>，<code>Copy to Clipboard Button</code>等插件。最好下载<code>prism.js</code>和<code>prism.css</code>文件，并上传到服务器主题文件相应的位置。</p><p>编辑<code>function.php</code>文件，添加如下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add_prism</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">wp_enqueue_style( <span class="string">&#x27;prism-css&#x27;</span>, get_stylesheet_directory_uri() . <span class="string">&#x27;/css/prism.css&#x27;</span> );</span><br><span class="line">wp_enqueue_script( <span class="string">&#x27;prism-js&#x27;</span>, get_stylesheet_directory_uri() . <span class="string">&#x27;/js/prism.js&#x27;</span>, [], <span class="literal">false</span>, <span class="literal">true</span> );</span><br><span class="line">&#125;</span><br><span class="line">add_action( <span class="string">&#x27;wp_enqueue_scripts&#x27;</span>, <span class="string">&#x27;add_prism&#x27;</span> );</span><br></pre></td></tr></table></figure><p>需要插入代码的时候，使用文本编辑，按照如下格式插入代码块:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;pre&gt;<span class="xml"><span class="tag">&lt;<span class="name">code</span> <span class="attr">class</span>=<span class="string">&quot;language-python line-numbers&quot;</span>&gt;</span>代码<span class="tag">&lt;/<span class="name">code</span>&gt;</span></span>&lt;/pre&gt;</span><br></pre></td></tr></table></figure><p>切记需使用文本编辑模式，否则可能无法识别。标签<code>class=&quot;language-xxx&quot;</code> 要写上。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><code>highlight.js</code>可以自动识别数据类型，且样式多样，相较于<code>prism.js</code>，并未提供显示代码行数的功能，需要自定义才能实现。<code>prism.js</code>提供了相应的插件功能，可选复制代码按钮等。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="软件" scheme="https://booku.ltd/categories/%E8%BD%AF%E4%BB%B6/"/>
    
    
    <category term="代码" scheme="https://booku.ltd/tags/%E4%BB%A3%E7%A0%81/"/>
    
    <category term="教程" scheme="https://booku.ltd/tags/%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Markdown实用语法教程</title>
    <link href="https://booku.ltd/posts/markdownbk/"/>
    <id>https://booku.ltd/posts/markdownbk/</id>
    <published>2020-07-12T16:07:58.000Z</published>
    <updated>2021-05-09T15:56:24.155Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h3 id="设计理念"><a href="#设计理念" class="headerlink" title="设计理念"></a>设计理念</h3><ul><li><p>Markdown 易于阅读，方便创作web文档，利于各平台无缝分发。</p></li><li><p>Markdown 语法灵感最大的来源还是纯文本 email 的格式，完全由标点符号标签组成的纯文本。</p></li><li><p>Markdown 文件应该以纯文本形式原样发布，不应该包含标记标签和格式化指令。</p></li></ul><h3 id="内联HTML语法"><a href="#内联HTML语法" class="headerlink" title="内联HTML语法"></a>内联HTML语法</h3><ul><li><p>HTML 是一种发布格式，Markdown 是一种创作格式。</p></li><li><p>Markdown语法集合比较小，只是HTML标签的一小部分。</p></li><li><p>对于 Markdown 中未包含的标签, 可以直接使用 HTML标签，例如用HTML <code>&lt;a&gt;</code>标签替代Markdown的链接语法。</p></li></ul><h3 id="特殊字符自动转义"><a href="#特殊字符自动转义" class="headerlink" title="特殊字符自动转义"></a>特殊字符自动转义</h3><p>  在 HTML 中, 有两个字符需要特殊对待: &lt; 和 &amp;，左尖括号用于起始标签。如果你想将它们用作字面量, 你必须将它们转义为字符实体,例如<code>&amp;lt;</code> 和 <code>&amp;amp;</code>。</p><h2 id="行内基本语法"><a href="#行内基本语法" class="headerlink" title="行内基本语法"></a>行内基本语法</h2><h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><p>Markdown支持两种标题语法，<strong>atx</strong> 和 <strong>Setext</strong> 形式。<br><strong>atx</strong> 形式：行首加井号表示不同级别的标题 (H1-H6),例如：# H1, ## H2, ### H3，#### H4.</p><pre><code># 一级标题## 二级标题### 三级标题#### 四级标题##### 五级标题###### 六级标题</code></pre><p> <strong>Setext</strong> 形式：在文字下放加 <code>===</code> 表示一级标题,使用 <code>---</code> 表示二级标题。</p><pre><code>一级标题====二级标题---</code></pre><h3 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h3><ul><li><p>普通文本</p><p>直接输入的文字就是普通文本。需要注意的是要换行的时候不能直接通过回车来换行，需要使用<code>\&lt;br&gt;</code>.也就是<code>html</code>里面的标签. 注意第三行的<code>&lt;br&gt;</code>前加了反斜杠 <code>\</code> 。目的就是像其他语言那样实现转义，也就是<code> \&lt;</code> 的转义。</p></li><li><p>单行文本</p><p>使用两个<code>Tab</code>符实现单行文本。</p></li><li><p>多行文本<br>多行文本和单行文本异曲同工，只要在每行行首加两个<code>Tab</code>。</p></li><li><p>文字高亮<br>如果你想使一段话中部分文字高亮显示，来起到突出强调的作用，那么可以把它用 `  ` 包围起来。<code>注意</code>这不是单引号，而是<code>Tab</code>上方，<code>数字1</code>左边的按键（注意使用<code>英文</code>输入法)。</p></li></ul><h3 id="斜体和粗体"><a href="#斜体和粗体" class="headerlink" title="斜体和粗体"></a>斜体和粗体</h3><p>使用<code>*</code>和<code>**</code>表示斜体和粗体。</p><p>这是 <em>斜体</em>, 这是 <strong>粗体</strong>。</p><h3 id="删除线和下划线"><a href="#删除线和下划线" class="headerlink" title="删除线和下划线"></a>删除线和下划线</h3><p>可用~~文字~~表示删除，下划线则可以通过<code>HTML</code>的<code>&lt;u&gt;</code>标签来实现。</p><p><strong>效果</strong><br>使用<code>~~</code><del>表示删除线</del> , 使用<code>&lt;u&gt;</code>表示<u>下划线</u>。</p><h3 id="外链接"><a href="#外链接" class="headerlink" title="外链接"></a>外链接</h3><p>使用 [描述](链接地址) 为文字增加外链接。</p><p>这是去往 <a href="https://github.com/">github</a> 的链接。</p><h3 id="锚点"><a href="#锚点" class="headerlink" title="锚点"></a>锚点</h3><p>锚点其实就是页内超链接，可以使用HTML的锚点标签（<code>#</code>）来设置锚点：<code>[回到目录](#index) </code><br>但其实呢，每一个标题都是一个锚点，不需要用标签来指定，比如我们 <code>[回到顶部](#TEST)</code><br>只支持在标题后插入锚点，其它地方无效。</p><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>使用 *，+，- 表示无序列表。</p><p>* 无序列表项 一   &emsp; &emsp; - 语文   &emsp; &emsp;  + 编程语言<br>* 无序列表项 二   &emsp; &emsp; - 数学   &emsp; &emsp;  + 脚本语言<br>* 无序列表项 三   &emsp; &emsp; - 英语   &emsp; &emsp;  + Python</p><p>效果(其他两种一样)：</p><ul><li><p>无序列表项 一</p></li><li><p>无序列表项 二</p></li><li><p>无序列表项 三</p></li></ul><p>使用数字和点表示有序列表。</p><ol><li><p>有序列表项 一</p></li><li><p>有序列表项 二</p></li><li><p>有序列表项 三</p></li></ol><h3 id="多级数字列表"><a href="#多级数字列表" class="headerlink" title="多级数字列表"></a>多级数字列表</h3><p>和圆点的列表一样，数字列表也有多级结构：</p><ol><li><p>这是一级的数字列表，数字1还是1</p><ol><li><p>这是二级的数字列表</p><ol><li><p>这是三级的数字列表</p><ol><li>四级的数字列表显示效果</li></ol></li></ol></li></ol></li></ol><h3 id="复选框列表"><a href="#复选框列表" class="headerlink" title="复选框列表"></a>复选框列表</h3><p>语法：<br>    - [x] C<br>    - [x] C++<br>    - [x] Java<br>    - [x] Qt<br>    - [x] Android<br>    - [ ] C#<br>    - [ ] .NET</p><p>示例：</p><ul><li><input checked="" disabled="" type="checkbox"> C</li><li><input checked="" disabled="" type="checkbox"> C++</li><li><input checked="" disabled="" type="checkbox"> Java</li><li><input checked="" disabled="" type="checkbox"> Qt</li><li><input checked="" disabled="" type="checkbox"> Android</li><li><input disabled="" type="checkbox"> C#</li><li><input disabled="" type="checkbox"> .NET</li></ul><h3 id="插入图像"><a href="#插入图像" class="headerlink" title="插入图像"></a>插入图像</h3><p>使用 ![描述](图片链接地址) 插入图像。</p><pre><code>![Markdown](https://cdn.jsdelivr.net/gh/kylenchen/CDN@latest/cover/markdown.jpg)</code></pre><p>插入图片示例：<br><img alt="Markdown" src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/kylenchen/CDN@latest/cover/markdown.jpg" height="30%" width="40%"></p><h3 id="文字引用"><a href="#文字引用" class="headerlink" title="文字引用"></a>文字引用</h3><p>使用 &gt; 表示文字引用。</p><ul><li><p>单个引用：</p><pre><code>&gt; 野火烧不尽，春风吹又生。</code></pre><p>示例：</p><blockquote><p>野火烧不尽，春风吹又生。</p></blockquote></li><li><p>字符包围：</p><pre><code>&gt; 数据结构&gt;&gt; 树&gt;&gt;&gt; 二叉树&gt;&gt;&gt;&gt; 平衡二叉树&gt;&gt;&gt;&gt;&gt; 满二叉树</code></pre><p>示例：</p><blockquote><p>数据结构</p><blockquote><p>树</p><blockquote><p>二叉树</p><blockquote><p>平衡二叉树</p><blockquote><p>满二叉树</p></blockquote></blockquote></blockquote></blockquote></blockquote></li></ul><h2 id="块语法"><a href="#块语法" class="headerlink" title="块语法"></a>块语法</h2><h3 id="内容目录"><a href="#内容目录" class="headerlink" title="内容目录"></a>内容目录</h3><p>在段落中填写 [TOC] 以显示全文内容的目录结构。</p><h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><p>对于程序员来说这个功能是必不可少的，插入程序代码的方式有两种，一种是利用缩进(Tab), 另一种是利用<code>“`”</code>符号。</p><ul><li><p><strong>行内式</strong></p><p>示例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">人生苦短，我用<span class="code">`python`</span></span><br></pre></td></tr></table></figure><p>效果：<br>人生苦短，我用<code>python</code></p></li><li><p><strong>缩进式多行代码</strong></p><p>使用 <strong>四个缩进空格</strong> 表示代码块。<br>示例：<br>   这是一个代码块，此行左侧有四个不可见的空格。</p></li><li><p><strong>加强的代码块</strong></p><p>支持四十一种编程语言的语法高亮的显示，行号显示。</p><p>代码示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo npm install</span><br></pre></td></tr></table></figure><p>Python 示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@requires_authorization</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">somefunc</span>(<span class="params">param1=<span class="string">&#x27;&#x27;</span>, param2=<span class="number">0</span></span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;A docstring&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> param1 &gt; param2: <span class="comment"># interesting</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">&#x27;Greater&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> (param2 - param1 + <span class="number">1</span>) <span class="keyword">or</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SomeClass</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>message = <span class="string">&#x27;&#x27;&#x27;interpreter</span></span><br><span class="line"><span class="string"><span class="meta">... </span>prompt&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>JavaScript 示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* nth element in the fibonacci series.</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param </span>n &gt;= 0</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return </span>the nth element, &gt;= 0.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fib</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">1</span>, b = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">var</span> tmp;</span><br><span class="line">  <span class="keyword">while</span> (--n &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">    tmp = a;</span><br><span class="line">    a += b;</span><br><span class="line">    b = tmp;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.write(fib(<span class="number">10</span>));</span><br></pre></td></tr></table></figure></li></ul><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><p>语法说明：</p><p>不管是哪种方式，第一行为表头，第二行分隔表头和主体部分，第三行开始每一行为一个表格行。列于列之间用管道符|隔开。原生方式的表格每一行的两边也要有管道符。第二行还可以为不同的列指定对齐方向。</p><pre><code>| 左对齐 | 居中  | 右对齐 ||:------------  |:---------------:| -----:|| col 3 is      | some wordy text | $1600 || col 2 is      | centered        |   $12 || zebra stripes | are neat        |    $1 |</code></pre><p>表格可以指定对齐方式,默认为左对齐。左对齐<code>|:</code>,居中<code>|:|</code>，右对齐<code>|:</code>。</p><table><thead><tr><th align="left">左对齐</th><th align="center">居中</th><th align="right">右对齐</th></tr></thead><tbody><tr><td align="left">col 3 is</td><td align="center">some wordy text</td><td align="right">$1600</td></tr><tr><td align="left">col 2 is</td><td align="center">centered</td><td align="right">$12</td></tr><tr><td align="left">zebra stripes</td><td align="center">are neat</td><td align="right">$1</td></tr></tbody></table><h3 id="HTML-标签"><a href="#HTML-标签" class="headerlink" title="HTML 标签"></a>HTML 标签</h3><p>本站支持在 Markdown 语法中嵌套 Html 标签，譬如，你可以用 Html 写一个纵跨两行的表格：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span> <span class="attr">rowspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>值班人员<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>星期一<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>星期二<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>星期三<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>李强<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>张明<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>王平<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="待办事宜Todo列表"><a href="#待办事宜Todo列表" class="headerlink" title="待办事宜Todo列表"></a>待办事宜Todo列表</h3><p>使用带有 [ ] 或 [x] （未完成或已完成）项的列表语法撰写一个待办事宜列表，并且支持子列表嵌套以及混用Markdown语法，例如：<br>    - [ ] <strong>Cmd Markdown 开发</strong><br>        - [ ] 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率<br>        - [ ] 支持以 PDF 格式导出文稿<br>        - [x] 新增Todo列表功能<br>        - [x] 改进 LaTex 功能<br>            - [x] 修复 LaTex 公式渲染问题<br>            - [x] 新增 LaTex 公式编号功能<br>    - [ ] <strong>七月旅行准备</strong><br>        - [ ] 准备邮轮上需要携带的物品<br>        - [ ] 浏览日本免税店的物品<br>        - [x] 购买蓝宝石公主号七月一日的船票</p><p>对应显示如下待办事宜 Todo 列表：</p><ul><li><input disabled="" type="checkbox"> <strong>Cmd Markdown 开发</strong><ul><li><input disabled="" type="checkbox"> 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率</li><li><input disabled="" type="checkbox"> 支持以 PDF 格式导出文稿</li><li><input checked="" disabled="" type="checkbox"> 新增Todo列表功能</li><li><input checked="" disabled="" type="checkbox"> 改进 LaTex 功能<ul><li><input checked="" disabled="" type="checkbox"> 修复 LaTex 公式渲染问题</li><li><input checked="" disabled="" type="checkbox"> 新增 LaTex 公式编号功能</li></ul></li></ul></li><li><input disabled="" type="checkbox"> <strong>七月旅行准备</strong><ul><li><input disabled="" type="checkbox"> 准备邮轮上需要携带的物品</li><li><input disabled="" type="checkbox"> 浏览日本免税店的物品</li><li><input checked="" disabled="" type="checkbox"> 购买蓝宝石公主号七月一日的船票</li></ul></li></ul><h3 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h3><table><thead><tr><th align="center">特殊字符</th><th align="center">描述</th><th align="center">代码</th></tr></thead><tbody><tr><td align="center"></td><td align="center">空格符</td><td align="center"><code>&amp;nbsp;</code></td></tr><tr><td align="center">&lt;</td><td align="center">小于号</td><td align="center"><code>&amp;lt;</code></td></tr><tr><td align="center">&gt;</td><td align="center">大于号</td><td align="center"><code>&amp;gt; </code></td></tr><tr><td align="center">&amp;</td><td align="center">和号</td><td align="center"><code>&amp;amp;</code></td></tr><tr><td align="center">￥</td><td align="center">人民币</td><td align="center"><code>&amp;yen;</code></td></tr><tr><td align="center">©</td><td align="center">版权</td><td align="center"><code>&amp;copy;</code></td></tr><tr><td align="center">°C</td><td align="center">摄氏度</td><td align="center"><code>&amp;deg;C</code></td></tr><tr><td align="center">±</td><td align="center">正负号</td><td align="center"><code> &amp;plusmn;</code></td></tr><tr><td align="center">×</td><td align="center">乘号</td><td align="center"><code>&amp;times;</code></td></tr><tr><td align="center">÷</td><td align="center">除号</td><td align="center"><code>&amp;divide;</code></td></tr><tr><td align="center">²</td><td align="center">平方（上标²）</td><td align="center"><code>&amp;sup2;</code></td></tr><tr><td align="center">³</td><td align="center">立方（上标³）</td><td align="center"><code>&amp;sup3;</code></td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="语言" scheme="https://booku.ltd/categories/%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="教程" scheme="https://booku.ltd/tags/%E6%95%99%E7%A8%8B/"/>
    
    <category term="Markdown" scheme="https://booku.ltd/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>Windows添加鼠标右键“打开方式”选项</title>
    <link href="https://booku.ltd/posts/openwith/"/>
    <id>https://booku.ltd/posts/openwith/</id>
    <published>2020-06-22T14:41:39.000Z</published>
    <updated>2021-05-09T15:56:24.155Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>电脑可以正常使用，可是鼠标右键的“打开方式”不见了。电脑鼠标右键没有“打开方式”的选项怎么办？</p></blockquote><h2 id="方法-步骤"><a href="#方法-步骤" class="headerlink" title="方法/步骤"></a>方法/步骤</h2><ul><li><p>使用键盘的<code>【win+R】</code>键打开输入<code>regedit</code>，按回车键。<br><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/kylenchen/CDN@latest/post/openwith/1.png"></p></li><li><p>打开“注册表编辑器”，找到<code>HKEY_CLASSES_ROOT</code>,展开<code>*</code>文件，新建<code>OpenWith</code>文件，双击右侧窗口“默认”，编辑字符串，数值数据填写为“打开方式”。<br><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/kylenchen/CDN@latest/post/openwith/2.png"></p></li><li><p><code>OpenWith</code>文件下，新建<code>Command</code>文件, 双击右侧窗口“默认”，编辑字符串，数值数据填写为“<code>C:\Windows\rundll32.exe Shell32.dll,OpenAs_RunDLL %1</code>” 。<br><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/kylenchen/CDN@latest/post/openwith/3.png"></p></li><li><p>关闭“注册表编辑器”，回到电脑桌面，文件鼠标右键可见“打开方式”。<br><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/kylenchen/CDN@latest/post/openwith/4.png"></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="电脑" scheme="https://booku.ltd/categories/%E7%94%B5%E8%84%91/"/>
    
    
    <category term="Windows" scheme="https://booku.ltd/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>PyCharm2019.3.3安装与激活教程</title>
    <link href="https://booku.ltd/posts/pycharm2019/"/>
    <id>https://booku.ltd/posts/pycharm2019/</id>
    <published>2020-04-30T06:38:52.000Z</published>
    <updated>2021-05-09T15:56:24.155Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="安装包下载"><a href="#安装包下载" class="headerlink" title="安装包下载"></a>安装包下载</h2><p>官网下载链接：<strong><a href="https://www.jetbrains.com/pycharm/download">https://www.jetbrains.com/pycharm/download</a></strong></p><p>博主选择的最新的**<code>Pycharm 2019.3.3 (Professional Edition) Build: 193.6494.30 on February 7 2020</code>**</p><h2 id="安装与激活"><a href="#安装与激活" class="headerlink" title="安装与激活"></a>安装与激活</h2><ol><li>安装成功后，先不要打开<code>pycharm</code>，再将激活补丁<code>jetbrains-agent.jar</code>放到<code>pycharm</code>安装路径下的<code>bin</code>文件夹里。顺便复制一下路径，一会儿会用到。<br><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/kylenchen/CDN@latest/post/pycharm2019/1.png"></li><li>激活补丁放到指定路径后，现在可以打开<code>pycharm</code>了，一开始会询问你是否有激活码，如果想永久激活，不要输入激活码，选择“<code>Evaluate for free</code>”免费试用，然后点击【<code>Evaluate</code>】按钮，选择<code>continue</code>。弹出需要注册码，注册之前，我们先屏蔽软件联网，以记事本的方式打开<code>hosts</code>文件，将代码添加至<code>hosts</code>文件屏蔽网络联网<br>hosts文件默认目录【<code>C:Windows\System32\drivers\etc</code>】</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0.0.0.0 account.jetbrains.com</span><br><span class="line">0.0.0.0 www.jetbrains.com</span><br></pre></td></tr></table></figure><p>win10用户可能需要修改<code>hosts</code>文件权限后才可以保存。<br><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/kylenchen/CDN@latest/post/pycharm2019/2.png"><br>3. 在弹出的开始欢迎界面中，点击右下角的【<code>Configure</code>】配置按钮，在弹出的菜单里，选择“<code>Edit Custom VM Option</code>”选项。 配置-&gt;编辑自定义<code>VM</code>配置<br>4. 弹出的新窗口里，在文本输入框的最下面一行输入以下内容： <code>-javaagent</code>:【你刚才复制的pycharm的bin文件夹的绝对路径】<code>jetbrains-agent.jar</code> 你需要把中括号【】在内的文本替换成你自己电脑里的路径，假如是“<code>D:\PyCharmpro\PyCharm 2019.3.3\bin</code>”，那么这一行，你就要填： <code>-javaagent:D:\PyCharmpro\PyCharm 2019.3.3\bin\jetbrains-agent.jar</code> 切记一定要确认自己的路径，写错将无法打开软件。<br><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/kylenchen/CDN@latest/post/pycharm2019/3.png"><br>点击【<code>Save</code>】按钮保存这一行信息，然后关闭<code>Pycharm</code>软件，再重新打开<code>Pycharm</code>。<br>5. 再次进入开始欢迎页面，点击“<code>Create New Project</code>”，在弹出的窗口里，右侧点开下拉菜单“<code>Project Interpreter</code>”。选择“<code>Existing interpreter</code>”。点击【…】按钮，选择本地的<code>python</code>解释器路径。（如果您还没有安装任何<code>python</code>解释器，可以安装官方<code>python</code>也可以按照<code>Anaconda</code>）<br>6. 进入工程页面后，在上方的菜单栏选择“<code>Help</code>”帮助菜单，点击里面的“<code>Register…</code>”选项，弹出注册方式。选择“<code>License server</code>”许可证服务器验证方式，此时要保证电脑处于联网状态，等待大概1分钟左右的时间，<code>Server address</code>会自动出现在输入框，出来之后，点击【<code>Activate</code>】按钮即可！至此，激活圆满结束！<br><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/kylenchen/CDN@latest/post/pycharm2019/4.png"><br>7. 验证是否永久激活成功：再次点击“<code>Help</code>”菜单栏，选中“<code>About</code>”选项，看看相关的信息，“<code>Licensed</code>”字段的出现意味着您已经永久激活成功。<br><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/kylenchen/CDN@latest/post/pycharm2019/5.png"><br>8. 解决<code>JetbrainsAgent loads successfully</code>!提示弹窗<br><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/kylenchen/CDN@latest/post/pycharm2019/6.png"><br>解决方式：<br>  <code>idea</code>安装目录<code> → bin → jetbrains-agent.jar →</code> 解压工具打开 <code>→ META-INF → important.txt</code> 将 <code>important.txt</code> 这个文件复制到 <code>bin</code> 目录下，问题解决！【保证<code>jetbrains-agent.jar</code> 和 <code>important.txt</code> 在同一个目录下】</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Python" scheme="https://booku.ltd/categories/Python/"/>
    
    
    <category term="教程" scheme="https://booku.ltd/tags/%E6%95%99%E7%A8%8B/"/>
    
    <category term="PyCharm" scheme="https://booku.ltd/tags/PyCharm/"/>
    
  </entry>
  
  <entry>
    <title>小内存系统systemd重启报错的问题</title>
    <link href="https://booku.ltd/posts/systemd/"/>
    <id>https://booku.ltd/posts/systemd/</id>
    <published>2020-04-30T06:30:47.000Z</published>
    <updated>2021-05-09T15:56:24.155Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>在128M或以下小内存Debian 9 x64版本的服务器，安装需要重启systemd服务的软件时，systemd总会报错:</p><p><strong>Run ‘systemctl daemon-reload’ to reload units.<br>Failed to reload daemon: Refusing to reload, not enough space available on /run/systemd. Currently, 13.0M are free, but a safety buffer of 16.0M is enforced</strong>.</p><p>报错是因为**/run<strong>太小，从报错可以看出，</strong>safety buffer<strong>为16.0M，则可修改</strong>/etc/fstab<strong>，给</strong>/run<strong>分配更大一点的</strong>safety buffer**。</p><p>在**/etc<strong>路径下找到</strong>fstab**，在内容结尾追加:</p><p><strong>tmpfs /run tmpfs nosuid,noexec,size=50M,nr_inodes=4096 0 0</strong></p><p>重启服务</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="系统" scheme="https://booku.ltd/categories/%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="问题" scheme="https://booku.ltd/tags/%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>Awesome, You-Get视频下载工具</title>
    <link href="https://booku.ltd/posts/you-get/"/>
    <id>https://booku.ltd/posts/you-get/</id>
    <published>2020-04-30T04:40:21.000Z</published>
    <updated>2021-05-09T15:56:24.155Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>相比国外视频下载神器youtube-dl，you-get则更偏向于国内平台的视频下载。</p></blockquote><h2 id="You-Get是神马"><a href="#You-Get是神马" class="headerlink" title="You-Get是神马"></a>You-Get是神马</h2><p>相比国外视频下载神器youtube-dl，you-get则更偏向于国内平台的视频下载。</p><p>You-Get 乃一小小哒命令行程序，提供便利的方式来下载网络上的媒体信息，可见官方文档。</p><ul><li>下载流行网站之音视频，例如YouTube, Youku, Niconico,以及更多</li><li>于您心仪的媒体播放器中观看在线视频，脱离浏览器与广告</li><li>下载您喜欢的网页上的图片</li><li>下载任何非HTML内容，例如二进制文件</li></ul><h2 id="安装说明"><a href="#安装说明" class="headerlink" title="安装说明"></a>安装说明</h2><p>You-Get的安装依赖：</p><ul><li>Python 3</li><li>FFmpeg (强烈推荐) or Libav</li><li>(可选) RTMPDump</li></ul><p>这里我只装了Python3.7，可完美运行</p><p>可通过pip安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip3 install you-get</span><br></pre></td></tr></table></figure><p>升级：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip3 install --upgrade you-get</span><br></pre></td></tr></table></figure><p>或下载最新更新:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ you-get https:&#x2F;&#x2F;github.com&#x2F;soimort&#x2F;you-get&#x2F;archive&#x2F;master.zip</span><br></pre></td></tr></table></figure><h2 id="下载视频"><a href="#下载视频" class="headerlink" title="下载视频"></a>下载视频</h2><p>当观赏感兴趣之视频，您可以使用 –info/-i 以查看所有可用画质与格式:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">$ you-get -i &#39;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v&#x3D;jNQXAC9IVRw&#39;</span><br><span class="line">   site: YouTube</span><br><span class="line">   title: Me at the zoo</span><br><span class="line">   streams: # Available quality and codecs</span><br><span class="line">      [ DEFAULT ] _________________________________</span><br><span class="line">      - itag: 43</span><br><span class="line">      container: webm</span><br><span class="line">      quality: medium</span><br><span class="line">      size: 0.5 MiB (564215 bytes)</span><br><span class="line">      # download-with: you-get --itag&#x3D;43 [URL]</span><br><span class="line"></span><br><span class="line">      - itag: 18</span><br><span class="line">      container: mp4</span><br><span class="line">      quality: medium</span><br><span class="line">      # download-with: you-get --itag&#x3D;18 [URL]</span><br><span class="line"></span><br><span class="line">      - itag: 5</span><br><span class="line">      container: flv</span><br><span class="line">      quality: small</span><br><span class="line">      # download-with: you-get --itag&#x3D;5 [URL]</span><br><span class="line"></span><br><span class="line">      - itag: 36</span><br><span class="line">      container: 3gp</span><br><span class="line">      quality: small</span><br><span class="line">      # download-with: you-get --itag&#x3D;36 [URL]</span><br><span class="line"></span><br><span class="line">      - itag: 17</span><br><span class="line">      container: 3gp</span><br><span class="line">      quality: small</span><br><span class="line">      # download-with: you-get --itag&#x3D;17 [URL]</span><br></pre></td></tr></table></figure><p>标有DEFAULT 为默认画质。如认同，可下载:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ you-get &#39;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v&#x3D;jNQXAC9IVRw&#39;</span><br><span class="line">   site: YouTube</span><br><span class="line">   title: Me at the zoo</span><br><span class="line">   stream:</span><br><span class="line">      - itag: 43</span><br><span class="line">      container: webm</span><br><span class="line">      quality: medium</span><br><span class="line">      size: 0.5 MiB (564215 bytes)</span><br><span class="line">      # download-with: you-get --itag&#x3D;43 [URL]</span><br><span class="line"></span><br><span class="line">   Downloading zoo.webm ...</span><br><span class="line">   100.0% ( 0.5&#x2F;0.5 MB) ├████████████████████████████████████████┤[1&#x2F;1] 7 MB&#x2F;s</span><br><span class="line"></span><br><span class="line">   Saving Me at the zoo.en.srt ...Done.</span><br></pre></td></tr></table></figure><p>(如YouTube视频带有字幕，将被一同下载，以SubRip格式保存.)</p><p>或，如您希望其他格式(mp4)，请使用其他提示选项:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ you-get --itag&#x3D;18 &#39;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v&#x3D;jNQXAC9IVRw&#39;</span><br></pre></td></tr></table></figure><p>更多使用说明和视频平台支持下载列表，可以从官方了解</p><p><a href="https://you-get.org/"><strong>You-Get官网</strong></a>：<a href="https://you-get.org/">https://you-get.org/</a><br><a href="https://github.com/soimort/you-get"><strong>GitHub项目</strong></a>：<a href="https://github.com/soimort/you-get">https://github.com/soimort/you-get</a></p><h2 id="Youtube-dl下载工具"><a href="#Youtube-dl下载工具" class="headerlink" title="Youtube-dl下载工具"></a>Youtube-dl下载工具</h2><p>可通过pip安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip3 install youtube-dl</span><br></pre></td></tr></table></figure><p>升级：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip3 install --upgrade youtube-dl</span><br></pre></td></tr></table></figure><p>获取视频信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">$ youtube-dl -F https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v&#x3D;ru5pYT_e7W4</span><br><span class="line">   [youtube] ru5pYT_e7W4: Downloading webpage</span><br><span class="line">   [youtube] ru5pYT_e7W4: Downloading video info webpage</span><br><span class="line">   [youtube] ru5pYT_e7W4: Downloading MPD manifest</span><br><span class="line">   [info] Available formats for ru5pYT_e7W4:</span><br><span class="line">   format code extension resolution note</span><br><span class="line">   139 m4a audio only DASH audio 50k , m4a_dash container, mp4a.40.5@ 48k (22050Hz)</span><br><span class="line">   140 m4a audio only DASH audio 130k , m4a_dash container, mp4a.40.2@128k (44100Hz)</span><br><span class="line">   251 webm audio only DASH audio 150k , webm_dash container, opus @160k (48000Hz)</span><br><span class="line">   278 webm 256x144 DASH video 95k , webm_dash container, vp9, 30fps, video only</span><br><span class="line">   160 mp4 256x144 DASH video 108k , mp4_dash container, avc1.4d400b, 30fps, video only</span><br><span class="line">   242 webm 426x240 DASH video 220k , webm_dash container, vp9, 30fps, video only</span><br><span class="line">   133 mp4 426x240 DASH video 242k , mp4_dash container, avc1.4d400c, 30fps, video only</span><br><span class="line">   243 webm 640x360 DASH video 405k , webm_dash container, vp9, 30fps, video only</span><br><span class="line">   134 mp4 640x360 DASH video 638k , mp4_dash container, avc1.4d401e, 30fps, video only</span><br><span class="line">   244 webm 854x480 DASH video 752k , webm_dash container, vp9, 30fps, video only</span><br><span class="line">   135 mp4 854x480 DASH video 1155k , mp4_dash container, avc1.4d4014, 30fps, video only</span><br><span class="line">   247 webm 1280x720 DASH video 1505k , webm_dash container, vp9, 30fps, video only</span><br><span class="line">   136 mp4 1280x720 DASH video 2310k , mp4_dash container, avc1.4d4016, 30fps, video only</span><br><span class="line">   248 webm 1920x1080 DASH video 2646k , webm_dash container, vp9, 30fps, video only</span><br><span class="line">   137 mp4 1920x1080 DASH video 4529k , mp4_dash container, avc1.640028, 30fps, video only</span><br><span class="line">   18 mp4 640x360 360p 664k , avc1.42001E, mp4a.40.2@ 96k (44100Hz), 24.61MiB (best)</span><br></pre></td></tr></table></figure><p>输入命令开始下载</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ youtube-dl -f 文件编号 视频地址</span><br></pre></td></tr></table></figure><h2 id="FFmpeg安装"><a href="#FFmpeg安装" class="headerlink" title="FFmpeg安装"></a>FFmpeg安装</h2><p>1）下载进入 <strong><a href="http://ffmpeg.org/download.html#build-windows">http://ffmpeg.org/download.html#build-windows</a></strong> 选择点击打开链接Windows对应的版本下载，Linux系统可通过 apt-get install ffmpeg 安装；</p><p>2）解压 <strong>ffmpeg-20191217-bd83191-win64-static.zip</strong> 文件到指定目录；</p><p>3）将解压后的文件目录中 bin 目录（包含 ffmpeg.exe ）添加进 path 环境变量中；</p><p>4）进入 cmd，输入 <strong>ffmpeg -version</strong>，可验证当前系统是否识别 ffmpeg，以及查看 ffmpeg 的版本</p><p>youtube-dl若要合并音频视频需要调用FFmpeg</p><p>输入命令开始合并下载</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ youtube-dl -f 137+139 https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v&#x3D;ru5pYT_e7W4</span><br></pre></td></tr></table></figure><p>更多使用说明和视频平台支持下载列表，可以从官方了解</p><p><a href="http://ytdl-org.github.io/youtube-dl/"><strong>Youtube-dl官网</strong></a>：<a href="http://ytdl-org.github.io/youtube-dl/">http://ytdl-org.github.io/youtube-dl/</a><br><a href="https://github.com/ytdl-org/youtube-dl"><strong>GitHub项目</strong></a>：<a href="https://github.com/ytdl-org/youtube-dl">https://github.com/ytdl-org/youtube-dl</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="系统" scheme="https://booku.ltd/categories/%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="You-Get" scheme="https://booku.ltd/tags/You-Get/"/>
    
    <category term="Youtube-dl" scheme="https://booku.ltd/tags/Youtube-dl/"/>
    
  </entry>
  
  <entry>
    <title>Linux系统开启原生BBR加速</title>
    <link href="https://booku.ltd/posts/bbrspeed/"/>
    <id>https://booku.ltd/posts/bbrspeed/</id>
    <published>2020-04-30T03:49:31.000Z</published>
    <updated>2021-05-09T15:56:24.155Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="CentOS-7启用原生Google-BBR"><a href="#CentOS-7启用原生Google-BBR" class="headerlink" title="CentOS 7启用原生Google BBR"></a>CentOS 7启用原生Google BBR</h2><h3 id="更新CentOS-7内核为支持BBR的内核"><a href="#更新CentOS-7内核为支持BBR的内核" class="headerlink" title="更新CentOS 7内核为支持BBR的内核"></a>更新CentOS 7内核为支持BBR的内核</h3><p>1、查看Centos内核</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname -r</span><br></pre></td></tr></table></figure><p>2、如果低于4.10，则更新内核</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rpm --import https:&#x2F;&#x2F;www.elrepo.org&#x2F;RPM-GPG-KEY-elrepo.org</span><br><span class="line">       rpm -Uvh http:&#x2F;&#x2F;www.elrepo.org&#x2F;elrepo-release-7.0-2.el7.elrepo.noarch.rpm</span><br><span class="line">       yum --enablerepo&#x3D;elrepo-kernel install kernel-ml -y</span><br></pre></td></tr></table></figure><p>3、安装完成后，查看已安装的内核：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -qa | grep kernel</span><br></pre></td></tr></table></figure><p>如果看到 <strong>kernel-ml-5.3.5-1.el7.elrepo.x86_64</strong> 字样的，即是成功。</p><p>4、更新开机启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">egrep ^menuentry &#x2F;etc&#x2F;grub2.cfg | cut -f 2 -d \\&#39;</span><br></pre></td></tr></table></figure><p>会看到类似这样的</p><p><strong>CentOS Linux (5.3.5-1.el7.elrepo.x86_64) 7 (Core)<br>       CentOS Linux (3.10.0-957.1.3.el7.x86_64) 7 (Core)<br>       CentOS Linux (0-rescue-96820b9851c24560b5f942f2496b9aeb) 7 (Core)</strong></p><p>设置 <strong>CentOS Linux (5.3.5-1.el7.elrepo.x86_64) 7 (Core)</strong> 为第一启动顺序（因为启动是从0开始计算）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grub2-set-default 0</span><br></pre></td></tr></table></figure><p>5、重启系统</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reboot</span><br></pre></td></tr></table></figure><h3 id="CentOS-7启用BBR"><a href="#CentOS-7启用BBR" class="headerlink" title="CentOS 7启用BBR"></a>CentOS 7启用BBR</h3><p>1、执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">echo &#39;net.core.default_qdisc&#x3D;fq&#39; | sudo tee -a &#x2F;etc&#x2F;sysctl.conf</span><br><span class="line">       echo &#39;net.ipv4.tcp\_congestion\_control&#x3D;bbr&#39; | sudo tee -a &#x2F;etc&#x2F;sysctl.conf</span><br><span class="line">       sysctl -p</span><br></pre></td></tr></table></figure><p>2、查看内核是否已开启BBR</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sysctl net.ipv4.tcp\_available\_congestion_control</span><br></pre></td></tr></table></figure><p>和</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsmod | grep bbr</span><br></pre></td></tr></table></figure><p>如果均显示BBR字样的，表示开启BBR成功。</p><h2 id="Debian-9启用原生Google-BBR"><a href="#Debian-9启用原生Google-BBR" class="headerlink" title="Debian 9启用原生Google BBR"></a>Debian 9启用原生Google BBR</h2><p>1、修改系统变量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;net.core.default_qdisc&#x3D;fq&quot; &gt;&gt; &#x2F;etc&#x2F;sysctl.conf</span><br><span class="line">       echo &quot;net.ipv4.tcp_congestion_control&#x3D;bbr&quot; &gt;&gt; &#x2F;etc&#x2F;sysctl.conf</span><br></pre></td></tr></table></figure><p>2、保存生效</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sysctl -p</span><br></pre></td></tr></table></figure><p>3、查看内核是否已开启BBR</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sysctl net.ipv4.tcp_available_congestion_control</span><br></pre></td></tr></table></figure><p>显示如下内容表示开启：</p><p><strong>sysctl net.ipv4.tcp_available_congestion_control<br>       net.ipv4.tcp_available_congestion_control = bbr cubic reno</strong></p><p>4、通过上面的操作应该已经启动了BBR。再看下BBR是否启动。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsmod | grep bbr</span><br></pre></td></tr></table></figure><p>显示以下即启动成功：</p><p><strong>lsmod | grep bbr<br>       tcp_bbr 20480 14</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="系统" scheme="https://booku.ltd/categories/%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="Linux" scheme="https://booku.ltd/tags/Linux/"/>
    
    <category term="BBR" scheme="https://booku.ltd/tags/BBR/"/>
    
  </entry>
  
  <entry>
    <title>基于Windows搭建PHP开发环境(IIS)</title>
    <link href="https://booku.ltd/posts/install-php/"/>
    <id>https://booku.ltd/posts/install-php/</id>
    <published>2019-06-21T08:51:05.000Z</published>
    <updated>2021-05-09T15:56:24.155Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="安装-PHP"><a href="#安装-PHP" class="headerlink" title="安装 PHP"></a>安装 PHP</h2><h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><p>为了能正常运行 PHP，我们需要安装其依赖的运行库<br><code>Visual C++ Redistributable for Visual Studio</code>。<br>复制下面链接到浏览器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.microsoft.com&#x2F;zh-CN&#x2F;download&#x2F;details.aspx?id&#x3D;48145</span><br></pre></td></tr></table></figure><p>点击下载，选择<code>x64</code>版本下载：<br><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/kylenchen/CDN@latest/post/install-php/1.png"></p><p>下载后，运行安装该文件：<br><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/kylenchen/CDN@latest/post/install-php/2.png"></p><h3 id="下载安装包"><a href="#下载安装包" class="headerlink" title="下载安装包"></a>下载安装包</h3><p>复制下面链接到浏览器:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;windows.PHP.net&#x2F;download</span><br></pre></td></tr></table></figure><p>选择<code>x64 Non Thread Safe</code>版本下载：<br><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/kylenchen/CDN@latest/post/install-php/3.png"></p><h3 id="解压、移动"><a href="#解压、移动" class="headerlink" title="解压、移动"></a>解压、移动</h3><p>解压下载的压缩包：<br><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/kylenchen/CDN@latest/post/install-php/4.png"></p><p>将解压后的文件夹移动至 C 盘，然后重命名为<code>php</code>：<br><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/kylenchen/CDN@latest/post/install-php/5.png"></p><h3 id="修改PHP配置文件"><a href="#修改PHP配置文件" class="headerlink" title="修改PHP配置文件"></a>修改PHP配置文件</h3><p>在D盘根目录新建一个名为php的文件夹，这个文件夹用来存放，PHP配置文件，数据库文件。然后在这个文件夹再新建一个名为php的文件夹，把我们刚才下载的PHP文件解压到这个文件夹里面。把php文件里面的php.ini-development复制一份，然后把名称修改为php.ini，如下图<br><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/kylenchen/CDN@latest/post/install-php/6.png"></p><p>用记事本打开这个php.ini,搜索extension_dir，<br>把extension_dir前面分号去掉；把后面的ext修改为：D:\php\ext ，修改。</p><p>搜索date.timezone，把它前面的分号去掉，把date.timezone =修改为：date.timezone = Asia/Shanghai。</p><p>继续搜索extension=php_ 把下列几个扩展前面的分号去掉，下面几个是必须要打开的。如果没有相关扩展，直接修改PHP.INI文件就行了。</p><p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/kylenchen/CDN@latest/post/install-php/7.png"></p><h2 id="配置-IIS"><a href="#配置-IIS" class="headerlink" title="配置 IIS"></a>配置 IIS</h2><h3 id="安装-IIS"><a href="#安装-IIS" class="headerlink" title="安装 IIS"></a>安装 IIS</h3><p>打开服务器管理器：<br><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/kylenchen/CDN@latest/post/install-php/8.png"></p><p>一路选择默认值，在『服务器角色』中勾选&nbsp;Web 服务器(IIS)：<br><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/kylenchen/CDN@latest/post/install-php/9.png"></p><p>在『角色服务』中的应用程序开发中勾选<code>CGI</code>：<br><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/kylenchen/CDN@latest/post/install-php/10.png"><br>点击下一步、安装，等待安装完成：<br><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/kylenchen/CDN@latest/post/install-php/11.png"></p><h3 id="测试访问"><a href="#测试访问" class="headerlink" title="测试访问"></a>测试访问</h3><p>安装完成后，打开浏览器，访问：<a href="http://localhost/">http://localhost</a><br>即可看到 IIS 欢迎页面。<br>你也可以访问 http://&lt;您的 CVM IP 地址&gt; 在外网查看。<br><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/kylenchen/CDN@latest/post/install-php/12.png"></p><h3 id="IIS-添加模块映射"><a href="#IIS-添加模块映射" class="headerlink" title="IIS - 添加模块映射"></a>IIS - 添加模块映射</h3><p>在开始菜单中，找到&nbsp;IIS 管理器，打开它：<br><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/kylenchen/CDN@latest/post/install-php/13.png"><br>点击左侧默认生成的服务器，然后双击面板中&nbsp;『处理程序映射』：<br><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/kylenchen/CDN@latest/post/install-php/14.png"><br>点击面板右侧的&nbsp;添加模块映射：<br><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/kylenchen/CDN@latest/post/install-php/15.png"><br>按下图填入、选择相应信息，确认添加：<br><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/kylenchen/CDN@latest/post/install-php/16.png"><br>（其中选择&nbsp;可执行文件&nbsp;时，注意更改右下角文件类型为&nbsp;.exe）&nbsp;<br><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/kylenchen/CDN@latest/post/install-php/17.png"></p><h3 id="IIS-默认文档"><a href="#IIS-默认文档" class="headerlink" title="IIS - 默认文档"></a>IIS - 默认文档</h3><p>双击面板中&nbsp;『默认文档』：<br><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/kylenchen/CDN@latest/post/install-php/18.png"><br>点击右上角&nbsp;添加，填入&nbsp;index.php：<br><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/kylenchen/CDN@latest/post/install-php/19.png"></p><h3 id="创建-index-php"><a href="#创建-index-php" class="headerlink" title="创建 index.php"></a>创建 index.php</h3><p>转至『编辑视图』，点击目录树上方刷新图标，然后展开&nbsp;inetpub\wwwroot。右键点击&nbsp;wwwroot，新建文件，命名为&nbsp;index.php，然后点击打开该文件。填入内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    phpinfo();</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>最后&nbsp;Ctrl + S&nbsp;保存。<br><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/kylenchen/CDN@latest/post/install-php/20.png"><br>测试连接在浏览器访问该地址:<code>http://localhost</code><br>可看到刚刚添加的&nbsp;index.php&nbsp;页内容。你也可以访问 http://&lt;您的 CVM IP 地址&gt; 在外网查看。<br><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/kylenchen/CDN@latest/post/install-php/21.png"></p><h3 id="新建网站"><a href="#新建网站" class="headerlink" title="新建网站"></a>新建网站</h3><p>把物理路径指向新建test网站目录。注意端口。如果你就一个站，那就用默认的80端口就行了。如果你有需要新建多个站，那就得修改端口。我这里用8001，如果再建第二个站的话，那就是8002、8003，以此类推。可建多个站。点击确定。如果你搭建的环境应用于服务器上面，IP地址处应填写你的服务器IP，端口处默认80，主机名处填写你的域名。若不填IP地址，则为localhost。<br><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/kylenchen/CDN@latest/post/install-php/22.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="开发环境" scheme="https://booku.ltd/categories/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
    
    
    <category term="Windows" scheme="https://booku.ltd/tags/Windows/"/>
    
    <category term="PHP" scheme="https://booku.ltd/tags/PHP/"/>
    
    <category term="IIS" scheme="https://booku.ltd/tags/IIS/"/>
    
  </entry>
  
  <entry>
    <title>修复Windows网络和互联网连接问题</title>
    <link href="https://booku.ltd/posts/netrepair/"/>
    <id>https://booku.ltd/posts/netrepair/</id>
    <published>2019-06-21T08:37:39.000Z</published>
    <updated>2021-05-09T15:56:24.155Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>这份独家教程将帮助你修复Windows系统几乎全部网络和互联网连接问题。下面给出的大多数方法可以在所有Windows版本通用，少数方法只能在旧版本系统上使用 当我们需要连接到Internet/LAN的时候可能都会遇到问题，然后就会看到各种各样的错误信息和错误代码。有时候是以太网无法连接，有时候是无法使用Wi-Fi。 我将尽可能列出Windows系统中各种网络和互联网连接问题的解决方法。你只需要一条条尝试就好，希望可以帮助你解决你的问题。</p><h2 id="方法一：使用内置网络诊断工具"><a href="#方法一：使用内置网络诊断工具" class="headerlink" title="方法一：使用内置网络诊断工具"></a>方法一：使用内置网络诊断工具</h2><p>首先你应该尝试使用Windows内置的诊断修复工具。这个工具会自动诊断并尝试修复问题。 要想启动这个工具，只需右击任务栏的网络图标选择”疑难解答”即可。 启动之后等待一会之后就会显示问题原因和诊断结果。 大多数情况这个工具就可以修复问题</p><h2 id="方法二：使用”网络重置”功能-仅Windows-10"><a href="#方法二：使用”网络重置”功能-仅Windows-10" class="headerlink" title="方法二：使用”网络重置”功能(仅Windows 10)"></a>方法二：使用”网络重置”功能(仅Windows 10)</h2><p>如果你在使用Windows 10系统，你可以使用独家内置的”网络重置”功能。它可以自动重置网络适配器和网络组件的设置。首先它会卸载所有安装的网络适配器，然后重新安装回来。它还会将其他的网络组件回复默认设置。</p><p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/kylenchen/CDN@latest/post/netrepair/1.png"></p><h2 id="方法三：手动重置TCP-IP设置"><a href="#方法三：手动重置TCP-IP设置" class="headerlink" title="方法三：手动重置TCP/IP设置"></a>方法三：手动重置TCP/IP设置</h2><p>附：<strong>netsh winsock reset<br>netsh int ip reset<br>netcfg -d<br>ipconfig /release<br>ipconfig /renew<br>ipconfig /flushdns<br>ipconfig /registerdns</strong></p><h2 id="方法四：使用注册表"><a href="#方法四：使用注册表" class="headerlink" title="方法四：使用注册表"></a>方法四：使用注册表</h2><p>以下是一些修复网络连接相关问题的注册表方法。所有的方法都需要编辑注册表和修改或删除值</p><p><strong>问题一:可以上网但任务栏网络图标显示叹号，网络适配器文件夹列表为空</strong> </p><ol><li><strong>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Network</strong><br>删除此目录下的Config值</li><li>如果1)不可行，可以打开设备管理器，卸载网络适配器选项下所有网络适配器，卸载完成后右击网络适配器选择”扫描硬件更改”<br><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/kylenchen/CDN@latest/post/netrepair/2.png"></li></ol><ol start="3"><li>如果以上方法不可行，可以打开注册表找到 <strong>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Network\Connections</strong><br>双击”ClassManagers”，输入以下值（每个值必须单独一行）</li></ol><p><strong>{B4C8DF59-D16F-4042-80B7-3557A254B7C5}        <br> {BA126AD3-2166-11D1-B1D0-00805FC1270E}          <br> {BA126AD5-2166-11D1-B1D0-00805FC1270E}        <br> {BA126ADD-2166-11D1-B1D0-00805FC1270E}</strong></p><ol start="4"><li>此方法专门适用从win7/8升级win10却无法在列表中看到无线网络的用户，以管理员方式启动命令提示符，输入以下两句命令(逐句输入运行)</li></ol><p><strong>reg delete HKCR\CLSID{988248f3-a1ad-49bf-9170-676cbbc36ba3} /va /f</strong><br><strong>netcfg -v -u dni_dne</strong></p><ol start="5"><li><p>如果网络适配器可以正确显示了但是网络图标仍然有叹号且无法上网，可以尝试修改DNS<br><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/kylenchen/CDN@latest/post/netrepair/3.png"></p></li><li><p>尝试卸载第三方安全软件</p></li></ol><p><strong>问题二：一个或多个网络协议缺失</strong></p><ol><li>尝试卸载第三方安全软件     </li><li>更新网络适配器驱动      </li><li>同问题一中的2)      </li><li>以管理员身份启动命令提示符输入以下命令后重启电脑        </li></ol><p><strong>netsh winsock reset</strong>      <br>5) 同问题一中的5)      <br>6) 以管理员身份启动命令提示符输入以下命令(逐条输入运行)后重启电脑<br><strong>netcfg -d        <br>ipconfig /release        <br>ipconfig /renew        <br>ipconfig /flushdns        <br>ipconfig /registerdns</strong></p><ol start="7"><li>进入注册表找到以下两条目录</li></ol><p><strong>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Winsock     HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\WinSock2</strong>        <br>删除Winsock和WinSock2并从其他电脑复制这两项值过来</p><h2 id="方法五：手动分配ip和dns"><a href="#方法五：手动分配ip和dns" class="headerlink" title="方法五：手动分配ip和dns"></a>方法五：手动分配ip和dns</h2><hr><p><strong>转载</strong></p><ul><li>西大有人 | <a href="https://www.bilibili.com/read/cv120081/">修复Windows网络和互联网连接问题</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="电脑" scheme="https://booku.ltd/categories/%E7%94%B5%E8%84%91/"/>
    
    
    <category term="Windows" scheme="https://booku.ltd/tags/Windows/"/>
    
    <category term="网络修复" scheme="https://booku.ltd/tags/%E7%BD%91%E7%BB%9C%E4%BF%AE%E5%A4%8D/"/>
    
  </entry>
  
  <entry>
    <title>MySQL数据库下载与安装配置(Windows)</title>
    <link href="https://booku.ltd/posts/install-mysql/"/>
    <id>https://booku.ltd/posts/install-mysql/</id>
    <published>2019-04-26T15:37:48.000Z</published>
    <updated>2021-05-09T15:56:24.155Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="下载MySQL"><a href="#下载MySQL" class="headerlink" title="下载MySQL"></a>下载MySQL</h2><p>打开MySQL的官网<a href="http://www.mysql.com/">www.mysql.com</a>, 发现有一个DOWNLOADS，找到MySQL Community Server。<a id="more"></a><br><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/kylenchen/CDN@latest/post/install-mysql/1.png"></p><p>选择操作系统及其版本，点击右侧的箭头进行选择<br><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/kylenchen/CDN@latest/post/install-mysql/2.png"></p><p>选择相应的版本下载，这里mysql-5.7.26-winx64为例，<br>如果你没有注册登录下载页面时，官网会提示你注册一个账号进行下载，当然你也可以选择<code>No thanks, just start my download</code>，无需注册即可下载MYSQL的解压包。<br><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/kylenchen/CDN@latest/post/install-mysql/3.png"></p><p>下载完成后，压缩文件，可以放在其他盘</p><h2 id="MySQL环境配置"><a href="#MySQL环境配置" class="headerlink" title="MySQL环境配置"></a>MySQL环境配置</h2><ul><li>新建<code>my.ini</code>文件<br>打开解压后的文件夹，就是D盘下的mysql-5.7.26-winx64 文件夹，新建一个<code>my.ini</code>文件后双击它，用记事本打开， 输入如下内容：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[client]</span><br><span class="line">port&#x3D;3306</span><br><span class="line">default-character-set&#x3D;utf8</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line"># 设置为自己MYSQL的安装目录</span><br><span class="line">basedir&#x3D;D:\mysql-5.7.26-winx64</span><br><span class="line"># 设置为MYSQL的数据目录</span><br><span class="line">datadir&#x3D;D:\mysql-5.7.26-winx64\data</span><br><span class="line">port&#x3D;3306</span><br><span class="line">character_set_server&#x3D;utf8</span><br><span class="line">sql_mode&#x3D;NO_ENGINE_SUBSTITUTION,NO_AUTO_CREATE_USER</span><br><span class="line">#开启查询缓存</span><br><span class="line">explicit_defaults_for_timestamp&#x3D;true</span><br><span class="line">skip-grant-tables</span><br></pre></td></tr></table></figure><ul><li>创建环境变量<br><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/kylenchen/CDN@latest/post/install-mysql/4.png"></li></ul><p>使用cmd运行命令，完成配置，需管理员身份运行cmd或powershell。</p><p> 在powershell或cmd窗口中，切换到mysql的bin目录, 完成配置。</p><ul><li>mysql启动</li></ul><p>首先输入mysqld –initialize 命令，它表示初始化mysql，生成data文件夹中的文件。如果没有报错，就表示初始化完成。　　　　<br>输入 mysqld -install 命令，安装MySQL. 如果出现Service successfully installed 说明注册成功了  因为我的已经注册好了，所以会出现下图， 已存在。</p><p>可以启动服务器了 net start mysql 命令启动服务器。关闭服务器用net stop mysql</p><p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/kylenchen/CDN@latest/post/install-mysql/5.png"></p><ul><li>MySQL 登录和退出<br>这涉及到MySQL 命令的常用参数： -u: u代表username, 表示用户名; -p: p 代表password, 表示登录密码； -h: host-name主机名； -P: port 端口。　　所以我们要登录MySQL，需要提供用户名，密码，主机名，端口号信息。语法  mysql [-u username] [-h host] [-p[password]];  安装MySQL后，我们会得到初始的用户名root, 但没有初始密码，但输入密码怎么办？我们只需键入mysql即可。如果访问本地服务器的话和使用mysql的默认端口时，-h和-P可以不写。 现在我们就登录一下， 在这之前要先启动mysql服务器。这里还是要以管理员的身份运行powershell　　当我们在命令行中输入mysql -u root -p 后，提示我们输入密码，这时输入mysql， 就可以登录到mysql 了</li></ul><p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/kylenchen/CDN@latest/post/install-mysql/6.png"></p><p>当然操作完成后还是要退出的，mysql退出有如下三种方法。注意，每一行语句要以; 分号结尾。如果按enter，你会发现它会另起一行，有一个箭头，表法该语句并没有结束。 exit;  quit;  \q;  </p><hr><p><strong>参考</strong></p><ul><li>SamWeb | <a href="https://www.cnblogs.com/SamWeb/p/7922490.html">MySQL数据库安装配置</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;下载MySQL&quot;&gt;&lt;a href=&quot;#下载MySQL&quot; class=&quot;headerlink&quot; title=&quot;下载MySQL&quot;&gt;&lt;/a&gt;下载MySQL&lt;/h2&gt;&lt;p&gt;打开MySQL的官网&lt;a href=&quot;http://www.mysql.com/&quot;&gt;www.mysql.com&lt;/a&gt;, 发现有一个DOWNLOADS，找到MySQL Community Server。</summary>
    
    
    
    <category term="数据" scheme="https://booku.ltd/categories/%E6%95%B0%E6%8D%AE/"/>
    
    
    <category term="MySQL" scheme="https://booku.ltd/tags/MySQL/"/>
    
    <category term="Windows" scheme="https://booku.ltd/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>聚类分析——K-means算法</title>
    <link href="https://booku.ltd/posts/kmeans/"/>
    <id>https://booku.ltd/posts/kmeans/</id>
    <published>2019-01-30T16:00:00.000Z</published>
    <updated>2021-05-09T15:56:24.155Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="分类与聚类"><a href="#分类与聚类" class="headerlink" title="分类与聚类"></a>分类与聚类</h2><p><strong>分类：</strong> 类别是已知的，通过对已知分类的数据进行训练和学习，找到这些不同类的特征，再对未分类的数据进行分类。属于监督学习。</p><p><strong>聚类：</strong> 事先不知道数据会分为几类，通过聚类分析将数据聚合成几个群体。聚类不需要对数据进行训练和学习。属于无监督学习。<a id="more"></a></p><h2 id="k均值-k-means-算法"><a href="#k均值-k-means-算法" class="headerlink" title="k均值(k-means)算法"></a>k均值(k-means)算法</h2><p>所谓聚类问题，就是给定一个元素集合D，其中每个元素具有n个可观察属性，使用某种算法将D划分成k个子集，要求每个子集内部的元素之间相异度尽可能低，而不同子集的元素相异度尽可能高。其中每个子集叫做一个簇。 与分类不同，分类是示例式学习，要求分类前明确各个类别，并断言每个元素映射到一个类别，而聚类是观察式学习，在聚类前可以不知道类别甚至不给定类别数量，是无监督学习的一种。目前聚类广泛应用于统计学、生物学、数据库技术和市场营销等领域，相应的算法也非常的多。本文仅介绍一种最简单的聚类算法——k均值（k-means）算法。</p><h3 id="计算简介"><a href="#计算简介" class="headerlink" title="计算简介"></a>计算简介</h3><p>k-means算法，也被称为k-平均或k-均值，是一种得到最广泛使用的聚类算法。 它是将各个聚类子集内的所有数据样本的均值作为该聚类的代表点。<br><strong>算法的主要思想</strong>是通过迭代过程把数据集划分为不同的类别，使得评价聚类性能的准则函数达到最优，从而使生成的每个聚类内紧凑，类间独立。这一算法不适合处理离散型属性，但是对于连续型具有较好的聚类效果。</p><h3 id="算法描述"><a href="#算法描述" class="headerlink" title="算法描述"></a>算法描述</h3><p>输入：簇的数目k和包含n个对象的数据库。<br>输出：k个簇，使平方误差准则最小。</p><p><strong>算法步骤：</strong></p><ol><li>为每个聚类确定一个初始聚类中心，这样就有K个初始聚类中心。</li><li>将样本集中的样本按照最小距离原则分配到最邻近聚类</li><li>使用每个聚类中的样本均值作为新的聚类中心。</li><li>重复步骤2.3直到聚类中心不再变化。</li></ol><h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><p><strong>优点：</strong></p><ul><li>原理简单，速度快</li><li>扩展性良好(大部分的计算都可以并行计算)</li><li>对大数据集有比较好的伸缩性</li></ul><p><strong>缺点：</strong></p><ul><li>需要指定聚类数量K(要生成的簇的数目)</li><li>对异常值敏感，因为算法并没有办法剔除异常值</li><li>对初始值敏感，对于不同的初始值，可能会导致不同结果</li><li>在簇的平均值被定义的情况下才能使用，这对于处理符号属性的数据不适用</li></ul><h2 id="二维数据聚类实例"><a href="#二维数据聚类实例" class="headerlink" title="二维数据聚类实例"></a>二维数据聚类实例</h2><h3 id="K-means算法"><a href="#K-means算法" class="headerlink" title="K-means算法"></a>K-means算法</h3><p>二维样本数据集，python3实现过程如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment">#load data</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">loadDataSet</span>(<span class="params">fileName</span>):</span></span><br><span class="line">    dataMat = []</span><br><span class="line">    fr = open(fileName)</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> fr.readlines(): <span class="comment">#for each line</span></span><br><span class="line">        curLine = line.strip().split(<span class="string">&#x27;\t&#x27;</span>)</span><br><span class="line">        fltLine = list(map(float,curLine))</span><br><span class="line">        dataMat.append(fltLine)</span><br><span class="line">    <span class="keyword">return</span> dataMat</span><br><span class="line"></span><br><span class="line"><span class="comment"># 簇</span></span><br><span class="line">k = <span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#distance func</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">distEclud</span>(<span class="params">vecA,vecB</span>):</span></span><br><span class="line">    <span class="keyword">return</span> np.sqrt(np.sum(np.power(vecA - vecB, <span class="number">2</span>)))  <span class="comment"># la.norm(vecA-vecB) 向量AB的欧式距离</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#init K points randomly</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">randCent</span>(<span class="params">dataSet, k</span>):</span></span><br><span class="line">    n = np.shape(dataSet)[<span class="number">1</span>]</span><br><span class="line">    centroids = np.mat(np.zeros((k,n)))<span class="comment">#create centroid mat</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(n):<span class="comment">#create random cluster centers, within bounds of each dimension</span></span><br><span class="line">        minJ = np.min(dataSet[:,j])</span><br><span class="line">        rangeJ = float(np.max(dataSet[:,j]) - minJ)</span><br><span class="line">        centroids[:,j] = np.mat(minJ + rangeJ * np.random.rand(k,<span class="number">1</span>))</span><br><span class="line">    <span class="keyword">return</span> centroids</span><br><span class="line"></span><br><span class="line"><span class="comment">#K-均值算法:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">kMeans</span>(<span class="params">dataSet,k,distMeas=distEclud,createCent=randCent</span>):</span></span><br><span class="line">    <span class="comment">#参数：dataset,num of cluster,distance func,initCen</span></span><br><span class="line">    m=np.shape(dataSet)[<span class="number">0</span>]</span><br><span class="line">    clusterAssment=np.mat(np.zeros((m,<span class="number">2</span>)))<span class="comment">#store the result matrix,2 cols for index and error</span></span><br><span class="line">    centroids=createCent(dataSet,k)</span><br><span class="line">    clusterChanged=<span class="literal">True</span></span><br><span class="line">    <span class="keyword">while</span> clusterChanged:</span><br><span class="line">        clusterChanged=<span class="literal">False</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(m):<span class="comment">#for every points</span></span><br><span class="line">            minDist = float(<span class="string">&#x27;inf&#x27;</span>);</span><br><span class="line">            minIndex = <span class="number">-1</span> <span class="comment">#init</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(k):<span class="comment">#for every k centers，find the nearest center</span></span><br><span class="line">                distJI=distMeas(centroids[j,:],dataSet[i,:])</span><br><span class="line">                <span class="keyword">if</span> distJI&lt;minDist:<span class="comment">#if distance is shorter than minDist</span></span><br><span class="line">                    minDist=distJI;</span><br><span class="line">                    minIndex=j<span class="comment"># update distance and index(类别)</span></span><br><span class="line">            <span class="keyword">if</span> clusterAssment[i,<span class="number">0</span>] != minIndex:</span><br><span class="line">                clusterChanged = <span class="literal">True</span></span><br><span class="line">                <span class="comment">#此处判断数据点所属类别与之前是否相同（是否变化，只要有一个点变化就重设为True，再次迭代）</span></span><br><span class="line">            clusterAssment[i,:] = minIndex,minDist**<span class="number">2</span></span><br><span class="line">        <span class="comment">#print(centroids)</span></span><br><span class="line">        <span class="comment"># update k center</span></span><br><span class="line">        <span class="keyword">for</span> cent <span class="keyword">in</span> range(k):</span><br><span class="line">            ptsInClust=dataSet[np.nonzero(clusterAssment[:,<span class="number">0</span>].A==cent)[<span class="number">0</span>]]</span><br><span class="line">            centroids[cent,:] = np.mean(ptsInClust,axis=<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> centroids,clusterAssment</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plotDataSet</span>(<span class="params">filename</span>):</span></span><br><span class="line">        <span class="comment"># 导入数据</span></span><br><span class="line">    datMat = np.mat(loadDataSet(filename))</span><br><span class="line">        <span class="comment"># 进行k-means算法其中k为4</span></span><br><span class="line">    myCentroids, clustAssing = kMeans(datMat, k)</span><br><span class="line">    fig = plt.figure()</span><br><span class="line">    ax = fig.add_subplot(<span class="number">111</span>)</span><br><span class="line">    scatterMarkers=[<span class="string">&#x27;s&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;^&#x27;</span>, <span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;v&#x27;</span>, <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;&gt;&#x27;</span>, <span class="string">&#x27;&lt;&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(k):</span><br><span class="line">        x1 = [];  y1 = []</span><br><span class="line">        markerStyle = scatterMarkers[i % len(scatterMarkers)]</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(len(datMat)):</span><br><span class="line">            <span class="keyword">if</span> clustAssing[j][:,<span class="number">0</span>] == i:</span><br><span class="line">               x1.append(datMat[j][:,<span class="number">0</span>])</span><br><span class="line">               y1.append(datMat[j][:,<span class="number">1</span>])</span><br><span class="line">        ax.scatter(x1, y1, alpha=<span class="number">1</span>,marker=markerStyle ,s=<span class="number">50</span>)</span><br><span class="line">        ax.scatter([myCentroids[:, <span class="number">0</span>]], [myCentroids[:, <span class="number">1</span>]], s=<span class="number">120</span>, marker=<span class="string">&#x27;+&#x27;</span>,c=<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">    plt.title(<span class="string">&#x27;K-means&#x27;</span>)</span><br><span class="line">    plt.xlabel(<span class="string">&#x27;X&#x27;</span>)</span><br><span class="line">    plt.ylabel(<span class="string">&#x27;Y&#x27;</span>)</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ ==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    plotDataSet(<span class="string">&#x27;testSet.txt&#x27;</span>)</span><br></pre></td></tr></table></figure><p>聚类结果显示。将聚类划分为不同簇的数据，用不同的颜色和符号进行显示，同时画出最终的聚类中心。<br><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/kylenchen/CDN@latest/post/kmeans/1.png" alt="K-means算法"></p><h3 id="Scikit-learn中K-means算法"><a href="#Scikit-learn中K-means算法" class="headerlink" title="Scikit-learn中K-means算法"></a>Scikit-learn中K-means算法</h3><p>Scikit-learn中有很多种K-means算法，这里使用传统的K-means，同样以二维样本数据集为例。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> sklearn.cluster <span class="keyword">import</span> KMeans</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">loadDataSet</span>(<span class="params">fileName</span>):</span></span><br><span class="line">    dataMat = []</span><br><span class="line">    fr = open(fileName)</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> fr.readlines(): <span class="comment">#for each line</span></span><br><span class="line">        curLine = line.strip().split(<span class="string">&#x27;\t&#x27;</span>)</span><br><span class="line">        fltLine = list(map(float,curLine))</span><br><span class="line">        dataMat.append(fltLine)</span><br><span class="line">    <span class="keyword">return</span> dataMat</span><br><span class="line"></span><br><span class="line">data = np.array(loadDataSet(<span class="string">&#x27;testSet.txt&#x27;</span>))</span><br><span class="line"></span><br><span class="line">k = <span class="number">4</span>  <span class="comment"># 簇</span></span><br><span class="line">fig = plt.figure()</span><br><span class="line">ax = fig.add_subplot(<span class="number">111</span>)</span><br><span class="line"></span><br><span class="line">estimator = KMeans(n_clusters=<span class="number">4</span>, random_state=<span class="number">9</span>)</span><br><span class="line"><span class="comment"># fit_predict表示拟合+预测，也可以分开写</span></span><br><span class="line">res = estimator.fit_predict(data)</span><br><span class="line"><span class="comment"># 各个类别的聚类中心值</span></span><br><span class="line">centroids = estimator.cluster_centers_</span><br><span class="line"><span class="comment"># 预测类别标签结果</span></span><br><span class="line">lable_pred = estimator.labels_</span><br><span class="line"><span class="comment"># 聚类中心均值向量的总和</span></span><br><span class="line">inertia = estimator.inertia_</span><br><span class="line"></span><br><span class="line">scatterMarkers=[<span class="string">&#x27;s&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;^&#x27;</span>, <span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;v&#x27;</span>, <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;&gt;&#x27;</span>, <span class="string">&#x27;&lt;&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(k):</span><br><span class="line">    markerStyle = scatterMarkers[i % len(scatterMarkers)]</span><br><span class="line">    x1 = []; y1=[]</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(len(data)):</span><br><span class="line">        <span class="keyword">if</span> lable_pred[j] == i:</span><br><span class="line">            x1.append(data[j, <span class="number">0</span>])</span><br><span class="line">            y1.append(data[j, <span class="number">1</span>])</span><br><span class="line">    <span class="comment"># ax.scatter(data[:, 0], data[:, 1], c=res, marker=markerStyle)</span></span><br><span class="line">    ax.scatter(x1, y1,alpha=<span class="number">1</span>, marker=markerStyle ,s=<span class="number">50</span>)</span><br><span class="line">    ax.scatter(centroids[:,<span class="number">0</span>], centroids[:,<span class="number">1</span>],marker=<span class="string">&#x27;+&#x27;</span>,s=<span class="number">120</span>,c=<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;sklearnKMeans&#x27;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;X&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;Y&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>聚类效果用散点图如下图所示。<br><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/kylenchen/CDN@latest/post/kmeans/2.png" alt="Scikit-learn中K-means算法"></p><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p><strong>1.文档分类器</strong></p><p>根据标签、主题和文档内容将文档分为多个不同的类别。这是一个非常标准且经典的K-means算法分类问题。首先，需要对文档进行初始化处理，将每个文档都用矢量来表示，并使用术语频率来识别常用术语进行文档分类，这一步很有必要。然后对文档向量进行聚类，识别文档组中的相似性。 这里是用于文档分类的K-means算法实现案例。</p><p><strong>2.物品传输优化</strong></p><p>使用K-means算法的组合找到无人机最佳发射位置和遗传算法来解决旅行商的行车路线问题，优化无人机物品传输过程。这是该项目的白皮书。</p><p><strong>3.识别犯罪地点</strong></p><p>使用城市中特定地区的相关犯罪数据，分析犯罪类别、犯罪地点以及两者之间的关联，可以对城市或区域中容易犯罪的地区做高质量的勘察。这是基于德里飞行情报区犯罪数据的论文。</p><p><strong>4.客户分类</strong></p><p>聚类能过帮助营销人员改善他们的客户群（在其目标区域内工作），并根据客户的购买历史、兴趣或活动监控来对客户类别做进一步细分。这是关于电信运营商如何将预付费客户分为充值模式、发送短信和浏览网站几个类别的白皮书。对客户进行分类有助于公司针对特定客户群制定特定的广告。</p><p><strong>5.球队状态分析</strong></p><p>分析球员的状态一直都是体育界的一个关键要素。随着竞争越来愈激烈，机器学习在这个领域也扮演着至关重要的角色。如果你想创建一个优秀的队伍并且喜欢根据球员状态来识别类似的球员，那么K-means算法是一个很好的选择。具体细节和实现请参照这篇文章。</p><p><strong>6.保险欺诈检测</strong></p><p>机器学习在欺诈检测中也扮演着一个至关重要的角色，在汽车、医疗保险和保险欺诈检测领域中广泛应用。利用以往欺诈性索赔的历史数据，根据它和欺诈性模式聚类的相似性来识别新的索赔。由于保险欺诈可能会对公司造成数百万美元的损失，因此欺诈检测对公司来说至关重要。这是汽车保险中使用聚类来检测欺诈的白皮书。</p><p><strong>7.乘车数据分析</strong></p><p>面向大众公开的Uber乘车信息的数据集，为我们提供了大量关于交通、运输时间、高峰乘车地点等有价值的数据集。分析这些数据不仅对Uber大有好处，而且有助于我们对城市的交通模式进行深入的了解，来帮助我们做城市未来规划。这是一篇使用单个样本数据集来分析Uber数据过程的文章。</p><p><strong>8.网络分析犯罪分子</strong></p><p>网络分析是从个人和团体中收集数据来识别二者之间的重要关系的过程。网络分析源自于犯罪档案，该档案提供了调查部门的信息，以对犯罪现场的罪犯进行分类。这是一篇在学术环境中，如何根据用户数据偏好对网络用户进行 cyber-profile的论文。</p><p><strong>9.呼叫记录详细分析</strong></p><p>通话详细记录（CDR）是电信公司在对用户的通话、短信和网络活动信息的收集。将通话详细记录与客户个人资料结合在一起，这能够帮助电信公司对客户需求做更多的预测。在这篇文章中，你将了解如何使用无监督K-Means聚类算法对客户一天24小时的活动进行聚类，来了解客户数小时内的使用情况。</p><p><strong>10.IT警报的自动化聚类</strong></p><p>大型企业IT基础架构技术组件（如网络，存储或数据库）会生成大量的警报消息。由于警报消息可以指向具体的操作，因此必须对警报信息进行手动筛选，确保后续过程的优先级。对数据进行聚类可以对警报类别和平均修复时间做深入了解，有助于对未来故障进行预测。</p><p><strong>参考：</strong></p><ol><li><a href="https://yq.aliyun.com/articles/573745?spm=a2c41.11181499.0.0">K-Means算法的10个有趣用例</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;分类与聚类&quot;&gt;&lt;a href=&quot;#分类与聚类&quot; class=&quot;headerlink&quot; title=&quot;分类与聚类&quot;&gt;&lt;/a&gt;分类与聚类&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;分类：&lt;/strong&gt; 类别是已知的，通过对已知分类的数据进行训练和学习，找到这些不同类的特征，再对未分类的数据进行分类。属于监督学习。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;聚类：&lt;/strong&gt; 事先不知道数据会分为几类，通过聚类分析将数据聚合成几个群体。聚类不需要对数据进行训练和学习。属于无监督学习。</summary>
    
    
    
    <category term="算法" scheme="https://booku.ltd/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="python" scheme="https://booku.ltd/tags/python/"/>
    
    <category term="机器学习" scheme="https://booku.ltd/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
</feed>
